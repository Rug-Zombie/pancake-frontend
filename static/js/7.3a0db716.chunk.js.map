{"version":3,"sources":["hooks/usePersistState.ts","components/layout/Flex.tsx","components/PageHeader/PageHeader.tsx","utils/apr.ts","utils/compoundApyHelpers.ts","components/Balance.tsx","components/ApyCalculatorModal/index.tsx","views/Pools/components/PoolCard/AprRow.tsx","views/Pools/components/PoolCard/StyledCard.tsx","components/Tags.tsx","views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/Pools/components/PoolCard/CardFooter/index.tsx","views/Pools/components/PoolCard/StyledCardHeader.tsx","views/Pools/components/PoolCard/CardActions/ApprovalAction.tsx","hooks/useApprove.ts","views/Pools/components/PoolCard/Modals/NotEnoughTokensModal.tsx","hooks/useStake.ts","hooks/useUnstake.ts","views/Pools/components/PoolCard/Modals/PercentageButton.tsx","views/Pools/components/PoolCard/Modals/StakeModal.tsx","views/Pools/components/PoolCard/CardActions/StakeActions.tsx","views/Pools/components/PoolCard/Modals/CollectModal.tsx","views/Pools/components/PoolCard/CardActions/HarvestActions.tsx","views/Pools/components/PoolCard/CardActions/index.tsx","views/Pools/components/PoolCard/index.tsx","hooks/cakeVault/useGetVaultUserInfo.ts","views/Pools/helpers.tsx","hooks/cakeVault/useGetVaultSharesInfo.ts","hooks/cakeVault/useGetVaultFees.ts","views/Pools/components/TheMoonGraveCard/NFTmr.tsx","views/Pools/components/TheMoonGraveCard/MinimumDepositTime.tsx","views/Pools/components/TheMoonGraveCard/StyledCard.tsx","views/Pools/components/TheMoonGraveCard/CardFooter/ExpandedFooter.tsx","views/Pools/components/TheMoonGraveCard/CardFooter/index.tsx","views/Pools/components/TheMoonGraveCard/StyledCardHeader.tsx","views/Pools/components/TheMoonGraveCard/VaultCardActions/VaultApprovalAction.tsx","hooks/cakeVault/useWithdrawalFeeTimer.ts","utils/getTimePeriods.ts","views/Pools/components/TheMoonGraveCard/WithdrawalFeeTimer.tsx","views/Pools/components/TheMoonGraveCard/UnstakingFeeCountdownRow.tsx","views/Pools/components/TheMoonGraveCard/FeeSummary.tsx","views/Pools/components/TheMoonGraveCard/VaultStakeModal.tsx","views/Pools/components/TheMoonGraveCard/VaultCardActions/HasSharesActions.tsx","views/Pools/components/TheMoonGraveCard/VaultCardActions/VaultStakeActions.tsx","views/Pools/components/TheMoonGraveCard/VaultCardActions/index.tsx","views/Pools/components/TheMoonGraveCard/index.tsx","views/Pools/components/PoolTabButtons.tsx","hooks/cakeVault/useGetVaultBountyInfo.ts","views/Pools/components/BountyModal.tsx","views/Pools/components/BountyCard.tsx","views/Pools/index.tsx","hooks/useContract.ts","utils/callHelpers.ts","hooks/useWeb3.ts","components/UnlockButton.tsx","hooks/useHarvest.ts","hooks/usePreviousValue.ts","hooks/useLastUpdated.ts"],"names":["usePersistState","initialValue","localStorageKey","useState","valueFromLS","localStorage","getItem","JSON","parse","error","value","setValue","useEffect","setItem","stringify","FlexLayout","styled","div","Outer","Box","theme","background","colors","gradients","bubblegum","Inner","Container","PageHeader","children","props","getPoolApr","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","BigNumber","times","BLOCKS_PER_YEAR","totalStakingTokenInPool","apr","isNaN","isFinite","toNumber","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenPrice","roundingDecimals","compoundFrequency","performanceFee","timesCompounded","aprAsDecimal","daysAsDecimalOfYear","principal","finalAmount","parseFloat","toFixed","getRoi","amountEarned","amountInvested","Balance","fontSize","color","decimals","isDisabled","unit","bold","previousValue","useRef","current","start","end","duration","separator","defaultProps","Grid","GridItem","ApyCalculatorModal","onDismiss","linkLabel","linkHref","earningTokenSymbol","t","useTranslation","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","title","textTransform","mb","maxWidth","fee","toLocaleString","mt","justifyContent","href","AprRow","pool","isAutoVault","stakingToken","earningToken","isFinished","useTooltip","placement","targetRef","tooltip","tooltipVisible","earningTokenPrice","useGetApiPrice","address","getAddress","getBalanceNumber","isHighValueToken","Math","round","apyModalLink","BASE_EXCHANGE_URL","process","useModal","symbol","onPresentApyModal","alignItems","ref","width","height","earningsPercentageToDisplay","onClick","variant","scale","StyledCard","Card","card","isStaking","mediaQueries","sm","ManualPoolTag","outline","startIcon","mr","CompoundingPoolTag","ExpandedWrapper","Flex","ExpandedFooter","account","totalCakeInVault","currentBlock","useBlock","startBlock","endBlock","contractAddress","tokenAddress","poolContractAddress","cakeVaultContractAddress","getCakeVaultAddress","imageSrc","BASE_URL","toLowerCase","isMetaMaskInScope","window","ethereum","isMetaMask","shouldShowBlockCountdown","Boolean","blocksUntilStart","max","blocksRemaining","hasPoolStarted","flexDirection","small","ml","projectLink","BASE_BSC_SCAN_URL","registerToken","React","memo","ExpandableButtonWrapper","Footer","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","Wrapper","CardHeader","primary","StyledCardHeader","stakingTokenSymbol","poolImageSrc","isCakePool","size","src","alt","ApprovalAction","isLoading","sousId","stakingTokenContract","useERC20","requestedApproval","setRequestedApproval","onApprove","lpContract","dispatch","useAppDispatch","useWeb3React","sousChefContract","useSousChef","useCallback","a","approve","tx","updateUserAllowance","useSousApprove","useToast","toastSuccess","toastError","handleApprove","console","message","endIcon","spin","disabled","StyledLink","Link","NotEnoughTokensModal","tokenSymbol","useTheme","headerBackground","cardHeader","tokensymbol","as","external","useSousStake","isUsingBnb","masterChefContract","useMasterchef","handleStake","amount","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","onStake","SYRUPIDS","StyledButton","Button","PercentageButton","mx","p","StakeModal","isBnbPool","stakingMax","isRemovingStake","onUnstake","isOldSyrup","includes","unstake","txHash","info","sousEmergencyUnstake","sousUnstake","updateUserPendingReward","useSousUnstake","pendingTx","setPendingTx","stakeAmount","setStakeAmount","percent","setPercent","usdValueStaked","formatNumber","handleChangePercent","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","getFullDisplayBalance","handleConfirmClick","minWidth","onChange","event","inputValue","target","convertedInput","getDecimalAmount","percentage","floor","min","currencyValue","onValueChanged","name","valueLabel","step","StakeAction","stakingTokenBalance","stakedBalance","isStaked","stakingLimit","convertedLimit","isGreaterThan","formattedBalance","stakingMaxDollarValue","onPresentTokenRequired","onPresentStake","onPresentUnstake","gt","CollectModal","fullBalance","earningsDollarValue","isCompoundPool","onReward","useSousHarvest","shouldCompound","setShouldCompound","tooltipOffset","handleHarvestConfirm","activeIndex","onItemClick","index","pb","HarvestActions","earnings","hasEarnings","onPresentCollect","InlineText","Text","CardActions","accountHasStakedBalance","harvest","poolCategory","userData","PoolCategory","BINANCE","allowance","pendingReward","needsApproval","display","StakeActions","PoolCard","ribbon","variantColor","text","UnlockButton","CardFooter","useGetVaultUserInfo","lastUpdated","cakeVaultContract","useCakeVaultContract","shares","BIG_ZERO","cakeAtLastUserAction","lastDepositedTime","lastUserActionTime","userInfo","setUserInfo","methods","call","userContractInfo","fetchUserVaultInfo","convertSharesToCake","cakePerFullShare","decimalsToRound","sharePriceNumber","amountInCake","cakeAsNumberBalance","cakeAsBigNumber","cakeAsDisplayBalance","convertCakeToShares","cake","amountInShares","sharesAsNumberBalance","sharesAsBigNumber","sharesAsDisplayBalance","useGetVaultSharesInfo","totalShares","setTotalShares","setTotalCakeInVault","pricePerFullShare","setPricePerFullShare","makeBatchRequest","getPricePerFullShare","sharePrice","sharePriceAsBigNumber","totalSharesAsBigNumber","totalCakeInVaultEstimate","getTotalShares","useGetVaultFees","callFee","withdrawalFee","withdrawalFeePeriod","fees","setFees","withdrawFeePeriod","withdrawFee","contractPerformanceFee","contractWithdrawalFeeTimePeriod","contractCallFee","contractWithdrawalFee","getFees","NFTmrRow","MinimumDepositTime","setLastUpdated","cakeContract","useCake","options","ethers","constants","MaxUint256","send","from","on","useWithdrawalFeeTimer","secondsRemaining","setSecondsRemaining","hasUnstakingFee","setHasUnstakingFee","secondsRemainingCalc","Date","now","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","abs","timeLeft","years","months","days","hours","minutes","WithdrawalFeeTimer","UnstakingFeeCountdownRow","feeAsDecimal","parseInt","shouldShowTimer","FeeSummary","vaultFees","feeInCake","VaultStakeModal","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","triggerWithdrawAllThreshold","sharesRemaining","minus","lte","withdrawAll","withdraw","toString","handleDeposit","deposit","pow","HasSharesActions","stakedDollarValue","VaultStakeActions","accountHasSharesStaked","CakeVaultCardActions","isVaultApproved","setIsVaultApproved","response","currentAllowance","checkApprovalStatus","VaultApprovalAction","StyledCardBody","CardBody","TheMoonGraveCard","useLastUpdated","performanceFeeAsDecimal","style","NFTmr","VaultCardActions","ButtonText","lg","UiKitLink","PoolTabButtons","stakedOnly","setStakedOnly","hasStakeInFinishedPools","useRouteMatch","url","isExact","to","show","checked","prev","px","useGetVaultBountyInfo","refresh","estimatedCallBountyReward","setEstimatedCallBountyReward","totalPendingCakeRewards","setTotalPendingCakeRewards","dollarCallBountyToDisplay","setDollarBountyToDisplay","cakeCallBountyToDisplay","setCakeBountyToDisplay","cakePrice","getCakeAddress","calculateHarvestCakeRewards","calculateTotalPendingCakeRewards","estimatedRewards","pendingCakeRewards","fetchRewards","dollarValueOfReward","estimatedDollars","estimatedCake","Divider","backgroundDisabled","BountyModal","TooltipComponent","callFeeAsDecimal","totalYieldToDisplay","tooltipPadding","right","BountyCard","fastRefresh","useRefresh","fontWeight","onPresentBountyModal","Pools","path","pools","usePools","useMemo","partition","finishedPools","openPools","filter","some","cakePoolData","find","Page","exact","orderBy","map","web3","useWeb3","getBep20Contract","getCakeContract","useLottery","getLotteryContract","getMasterchefContract","id","getSouschefContract","getCakeVaultContract","pid","enterStaking","DEFAULT_TOKEN_DECIMAL","gas","transactionHash","BIG_TEN","leaveStaking","emergencyWithdraw","soushHarvest","soushHarvestBnb","library","refEth","Web3","getWeb3NoAccount","setweb3","useAuth","login","logout","onPresentConnectModal","useWalletModal","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","handleHarvest","usePreviousValue","setStateLastUpdated","previousLastUpdated"],"mappings":"4PAuBeA,EAlBS,SAACC,EAAmBC,GAA6B,IAAD,EAC5CC,oBAAS,WACjC,IACE,IAAMC,EAAcC,aAAaC,QAAQJ,GAEzC,OAAOE,EAAcG,KAAKC,MAAMJ,GAAeH,EAC/C,MAAOQ,GACP,OAAOR,MAP2D,mBAC/DS,EAD+D,KACxDC,EADwD,KAetE,OAJAC,qBAAU,WACRP,aAAaQ,QAAQX,EAAiBK,KAAKO,UAAUJ,MACpD,CAACA,EAAOR,IAEJ,CAACQ,EAAOC,I,uBCLFI,EAbIC,IAAOC,IAAV,4N,0CCGVC,EAAQF,YAAOG,IAAPH,CAAH,gDACK,gBAAGI,EAAH,EAAGA,MAAH,SAAUC,YAA+BD,EAAME,OAAOC,UAAUC,aAG1EC,EAAQT,YAAOU,IAAPV,CAAH,2EAWIW,EANuC,SAAC,GAAD,IAAGN,EAAH,EAAGA,WAAYO,EAAf,EAAeA,SAAaC,EAA5B,gDACpD,cAACX,EAAD,yBAAOG,WAAYA,GAAgBQ,GAAnC,aACE,cAACJ,EAAD,UAAQG,Q,mCCLCE,EAAa,SACxBC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAA0B,IAAIC,IAAUJ,GAAkBK,MAAMH,GAAeG,MAAMC,KACrFC,EAA0B,IAAIH,IAAUL,GAAmBM,MAAMJ,GACjEO,EAAML,EAAwBlB,IAAIsB,GAAyBF,MAAM,KACvE,OAAOG,EAAIC,UAAYD,EAAIE,WAAa,KAAOF,EAAIG,YCpBxCC,EAA2C,SAAC,GAOlD,IANLC,EAMI,EANJA,aACAC,EAKI,EALJA,QACAC,EAII,EAJJA,WAII,IAHJC,wBAGI,MAHe,EAGf,MAFJC,yBAEI,MAFgB,EAEhB,MADJC,sBACI,MADa,EACb,EAEEC,EAAkB,IAAMF,EAE1BG,EAAeN,EAAU,IAEzBI,IAIFE,GADoBN,EADMA,EAAU,IAAOI,GAEd,KAG/B,IAAMG,EAAsBR,EAAe,IAErCS,EAAY,IAAOP,EAEnBQ,EAAcD,EAAS,SAAI,EAAIF,EAAeD,EAAqBA,EAAkBE,GAI3F,OAAOG,YAFgBD,EAAcD,GAEJG,QAAQT,KAG9BU,EAAS,SAAC,GAErB,OAF0D,EAAnCC,aAAmC,EAArBC,eACgB,K,kBCfjDC,EAAkC,SAAC,GAAkE,IAAhEnD,EAA+D,EAA/DA,MAAOoD,EAAwD,EAAxDA,SAAUC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACvFC,EAAgBC,iBAAO,GAM7B,OAJAzD,qBAAU,WACRwD,EAAcE,QAAU5D,IACvB,CAACA,IAGF,eAAC,IAAD,CAAMyD,KAAMA,EAAMJ,MAAOE,EAAa,eAAiBF,EAAOD,SAAUA,EAAxE,UACE,cAAC,IAAD,CAASS,MAAOH,EAAcE,QAASE,IAAK9D,EAAOsD,SAAUA,EAAUS,SAAU,EAAGC,UAAU,MAC7FhE,GAASwD,GAAQ,+BAAOA,QAK/BL,EAAQc,aAAe,CACrBb,SAAU,OACVG,YAAY,EACZF,MAAO,OACPC,SAAU,GAGGH,I,sDAAAA,KCrBTe,GAAO5D,IAAOC,IAAV,wJAOJ4D,GAAW7D,IAAOC,IAAV,sDAwJC6D,GApJ+C,SAAC,GAUxD,IATLC,EASI,EATJA,UACAhC,EAQI,EARJA,WACAP,EAOI,EAPJA,IACAwC,EAMI,EANJA,UACAC,EAKI,EALJA,SAKI,IAJJC,0BAII,MAJiB,OAIjB,MAHJlC,wBAGI,MAHe,EAGf,MAFJC,yBAEI,MAFgB,EAEhB,MADJC,sBACI,MADa,EACb,EACIiC,EAAMC,cAAND,EACFE,EAAiC,IAAOtC,EAExCuC,EAA2B1C,EAAyC,CACxEC,aAAc,EACdC,QAASN,EACTO,aACAC,mBACAC,oBACAC,mBAEIqC,EAA2B3C,EAAyC,CACxEC,aAAc,EACdC,QAASN,EACTO,aACAC,mBACAC,oBACAC,mBAEIsC,EAA4B5C,EAAyC,CACzEC,aAAc,GACdC,QAASN,EACTO,aACAC,mBACAC,oBACAC,mBAEIuC,EAA6B7C,EAAyC,CAC1EC,aAAc,IACdC,QAASN,EACTO,aACAC,mBACAC,oBACAC,mBAGF,OACE,eAAC,IAAD,CAAOwC,MAAM,MAAMX,UAAWA,EAA9B,UACE,eAACH,GAAD,WACE,cAACC,GAAD,UACE,cAAC,IAAD,CAAMf,SAAS,OAAOK,MAAI,EAACJ,MAAM,aAAa4B,cAAc,YAAYC,GAAG,OAA3E,SACGT,EAAE,iBAGP,cAACN,GAAD,UACE,cAAC,IAAD,CAAMf,SAAS,OAAOK,MAAI,EAACJ,MAAM,aAAa4B,cAAc,YAAYC,GAAG,OAA3E,SACGT,EAAE,WAGP,cAACN,GAAD,UACE,eAAC,IAAD,CAAMf,SAAS,OAAOK,MAAI,EAACJ,MAAM,aAAa4B,cAAc,YAAYC,GAAG,OAA3E,UACGV,EADH,IACwBC,EAAE,OAD1B,cAKF,cAACN,GAAD,UACE,cAAC,IAAD,mBAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGnB,EAAO,CAAEC,aAAc2B,EAA0B1B,eAAgByB,IAAkC5B,QAClGT,GAFJ,SAOF,cAAC6B,GAAD,UACE,cAAC,IAAD,UAAOS,MAGT,cAACT,GAAD,UACE,cAAC,IAAD,mBAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGnB,EAAO,CAAEC,aAAc4B,EAA0B3B,eAAgByB,IAAkC5B,QAClGT,GAFJ,SAOF,cAAC6B,GAAD,UACE,cAAC,IAAD,UAAOU,MAGT,cAACV,GAAD,UACE,cAAC,IAAD,oBAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGnB,EAAO,CACNC,aAAc6B,EACd5B,eAAgByB,IACf5B,QAAQT,GAJb,SAQF,cAAC6B,GAAD,UACE,cAAC,IAAD,UAAOW,MAGT,cAACX,GAAD,UACE,cAAC,IAAD,0BAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGnB,EAAO,CACNC,aAAc8B,EACd7B,eAAgByB,IACf5B,QAAQT,GAJb,SAQF,cAAC6B,GAAD,UACE,cAAC,IAAD,UAAOY,SAGX,eAAC,IAAD,CAAKG,GAAG,OAAOC,SAAS,QAAxB,UACE,cAAC,IAAD,CAAM/B,SAAS,OAAOC,MAAM,aAA5B,SACGoB,EAAE,sKAED,CAAEW,IAAK7C,EAAkB8C,qBAG5B7C,GACC,cAAC,IAAD,CAAM8C,GAAG,OAAOlC,SAAS,OAAOC,MAAM,aAAtC,SACGoB,EAAE,2EAA4E,CAAEW,IAAK5C,SAI5F,cAAC,IAAD,CAAM+C,eAAe,SAArB,SACE,cAAC,IAAD,CAAcC,KAAMjB,EAApB,SAA+BD,UC/DxBmB,GAvFuB,SAAC,GAMhC,IALLC,EAKI,EALJA,KACArE,EAII,EAJJA,kBAII,IAHJsE,mBAGI,aAFJpD,yBAEI,MAFgB,EAEhB,MADJC,sBACI,MADa,EACb,EACIiC,EAAMC,cAAND,EACAmB,EAAuEF,EAAvEE,aAAcC,EAAyDH,EAAzDG,aAActE,EAA2CmE,EAA3CnE,YAAauE,EAA8BJ,EAA9BI,WAAYtE,EAAkBkE,EAAlBlE,cAFzD,EAG2CuE,aAC7CtB,EAAE,kHACF,CAAEuB,UAAW,eAFPC,EAHJ,EAGIA,UAAWC,EAHf,EAGeA,QAASC,EAHxB,EAGwBA,eAKtBC,EAAoBC,YAAeR,EAAaS,QAAUC,YAAWV,EAAaS,SAAW,IAC7FxE,EAAMV,EACVC,EACA+E,EACAI,YAAiBjF,EAAaqE,EAAatC,UAC3CR,WAAWtB,IAIPiF,EAAmBC,KAAKC,MAAMP,EAAoB,KAAQ,EAC1D9D,EAAmBmE,EAAmB,EAAI,EAqB1CG,EACJhB,EAAaU,SAAb,UACGO,IADH,kCAC8CjB,EAAaU,QAAQQ,KAzCjE,EA2CwBC,YAC1B,cAAC,GAAD,CACE1E,WAAY+D,EACZtE,IAAKA,EACLwC,UAAS,UAAKG,EAAE,OAAP,YAAiBmB,EAAaoB,QACvCzC,SAAUqC,GAAgBC,IAC1BrC,mBAAoBqB,EAAamB,OACjC1E,iBAAkBmE,EAAmB,EAAI,EACzClE,kBAAmBA,EACnBC,eAAgBA,KATbyE,EA3CH,oBAwDJ,OACE,eAAC,IAAD,CAAMC,WAAW,SAAS3B,eAAe,gBAAzC,UACGY,GAAkBD,EACnB,eAAC,IAAD,CAAaiB,IAAKlB,EAAlB,UAA4CxB,EAAdkB,EAAgB,MAAW,OAAzD,OACCG,IAAehE,EACd,cAAC,IAAD,CAAUsF,MAAM,OAAOC,OAAO,SAE9B,eAAC,IAAD,CAAMH,WAAW,SAAjB,UACE,cAAC,GAAD,CACE9D,SAAS,OACTG,WAAYuC,EACZ9F,MA/C0B,WAClC,GAAI2F,EAAa,CACf,IAAMhB,EAAiC,IAAOyB,EACxCrB,EAA6B7C,EAAyC,CAC1EC,aAAc,IACdC,QAASN,EACTO,WAAY+D,EACZ9D,mBACAC,oBACAC,mBAEF,OAAOQ,EAAO,CACZC,aAAc8B,EACd7B,eAAgByB,IAGpB,OAAO7C,EA+BQwF,GACPhE,SAAU,EACVE,KAAK,IACLC,MAAI,IAEN,cAAC,IAAD,CAAY8D,QAASN,EAAmBO,QAAQ,OAAOC,MAAM,KAA7D,SACE,cAAC,IAAD,CAAepE,MAAM,aAAa+D,MAAM,kBC7ErCM,GApBIpH,YAAOqH,IAAPrH,CAAH,8RAGA,SAACa,GAAD,OAAWA,EAAMT,MAAMkH,KAAKjH,cAGjC,gBAAGmF,EAAH,EAAGA,WAAH,SAAepF,MAAkBE,OAAOkF,EAAa,eAAiB,gBACjE,qBAAG+B,UAEX,2BACA,iFAKJ,qBAAGnH,MAAkBoH,aAAaC,MCShCC,GAAgB,SAAC7G,GAAD,OACpB,cAAC,IAAD,yBAAKqG,QAAQ,YAAYS,SAAO,EAACC,UAAW,cAAC,IAAD,CAAad,MAAM,OAAO/D,MAAM,YAAY8E,GAAG,SAAchH,GAAzG,0BAKIiH,GAAqB,SAACjH,GAAD,OACzB,cAAC,IAAD,yBAAKqG,QAAQ,UAAUS,SAAO,EAACC,UAAW,cAAC,IAAD,CAAed,MAAM,OAAO/D,MAAM,UAAU8E,GAAG,SAAchH,GAAvG,wB,UCJIkH,GAAkB/H,YAAOgI,IAAPhI,CAAH,+EAOfiI,GAAgD,SAAC,GAMhD,IAAD,EALJ7C,EAKI,EALJA,KACA8C,EAII,EAJJA,QAII,IAHJhG,sBAGI,MAHa,EAGb,MAFJmD,mBAEI,SADJ8C,EACI,EADJA,iBAEQhE,EAAMC,cAAND,EACAiE,EAAiBC,cAAjBD,aACA9C,EAA+FF,EAA/FE,aAAcC,EAAiFH,EAAjFG,aAActE,EAAmEmE,EAAnEnE,YAAaqH,EAAsDlD,EAAtDkD,WAAYC,EAA0CnD,EAA1CmD,SAAU/C,EAAgCJ,EAAhCI,WAAYgD,EAAoBpD,EAApBoD,gBAE7EC,EAAelD,EAAaS,QAAUC,YAAWV,EAAaS,SAAW,GACzE0C,EAAsBzC,YAAWuC,GACjCG,EAA2BC,cAC3BC,EAAQ,UAAMC,IAAN,0BAAgCvD,EAAamB,OAAOqC,cAApD,QACRC,KAAqB,UAAEC,OAAuBC,gBAAzB,aAAC,EAAkCC,YAExDC,EAA2BC,SAAS7D,GAAc8C,GAAcC,GAChEe,EAAmBlD,KAAKmD,IAAIjB,EAAaF,EAAc,GACvDoB,EAAkBpD,KAAKmD,IAAIhB,EAAWH,EAAc,GACpDqB,EAAsC,IAArBH,GAA0BE,EAAkB,EAd/D,EAgB2C/D,aAC7CtB,EAAE,gEACF,CAAEuB,UAAW,eAFPC,EAhBJ,EAgBIA,UAAWC,EAhBf,EAgBeA,QAASC,EAhBxB,EAgBwBA,eAK5B,OACE,eAACkC,GAAD,CAAiB2B,cAAc,SAA/B,UACE,eAAC,IAAD,CAAM9E,GAAG,MAAMK,eAAe,gBAAgB2B,WAAW,SAAzD,UACE,cAAC,IAAD,CAAM+C,OAAK,EAAX,SAAaxF,EAAE,mBACf,cAAC,IAAD,CAAMyC,WAAW,aAAjB,SACG3F,EACC,qCACE,cAAC,GAAD,CACE6B,SAAS,OACTpD,MACE2F,EACIa,YAAiBiC,EAAkB7C,EAAatC,UAChDkD,YAAiBjF,EAAaqE,EAAatC,YAGnD,cAAC,IAAD,CAAM4G,GAAG,MAAM9G,SAAS,OAAxB,SACGwC,EAAaoB,YAIlB,cAAC,IAAD,CAAUI,MAAM,OAAOC,OAAO,cAInCqC,GACC,eAAC,IAAD,CAAMxE,GAAG,MAAMK,eAAe,gBAAgB2B,WAAW,SAAzD,UACE,eAAC,IAAD,CAAM+C,OAAK,EAAX,UAA8BxF,EAAjBsF,EAAmB,MAAW,SAA3C,OACA,eAAC,IAAD,CAAM7C,WAAW,SAAjB,UACG4C,GAAmBF,EAClB,cAAC,GAAD,CACEvG,MAAM,UACND,SAAS,OACTpD,MAAO+J,EAAiBD,EAAkBF,EAC1CtG,SAAU,IAGZ,cAAC,IAAD,CAAU8D,MAAM,OAAOC,OAAO,SAEhC,cAAC,IAAD,CAAM6C,GAAG,MAAM7G,MAAM,UAAU4G,OAAK,EAApC,SACGxF,EAAE,YAEL,cAAC,IAAD,CAAWyF,GAAG,MAAM7G,MAAM,kBAI/BsC,GACC,eAAC,IAAD,CAAMT,GAAG,MAAMK,eAAe,gBAAgB2B,WAAW,SAAzD,UACGf,GAAkBD,EACnB,cAAC,IAAD,CAAaiB,IAAKlB,EAAWgE,OAAK,EAAlC,SACGxF,EAAE,qBAEL,cAAC,IAAD,CAAMyC,WAAW,SAAjB,SACE,eAAC,IAAD,CAAMgD,GAAG,MAAMD,OAAK,EAApB,UACGzH,EAAiB,IADpB,YAMN,cAAC,IAAD,CAAM0C,GAAG,MAAMK,eAAe,WAA9B,SACE,cAAC,IAAD,CAAc9B,MAAM,EAAOwG,OAAK,EAACzE,KAAMK,EAAasE,YAApD,SACG1F,EAAE,yBAGNuE,GACC,cAAC,IAAD,CAAM9D,GAAG,MAAMK,eAAe,WAA9B,SACE,cAAC,IAAD,CACE9B,MAAM,EACNwG,OAAK,EACLzE,KAAI,UAAK4E,IAAL,oBAAkCzE,EAAcsD,EAA2BD,GAHjF,SAKGvE,EAAE,qBAIR+D,GAAWc,GAAqBP,GAC/B,eAAC,IAAD,CAAMxD,eAAe,WAArB,UACE,cAAC,IAAD,CACElC,MAAM,UACN4G,OAAK,EACL1C,QAAS,kBAAM8C,aAActB,EAAclD,EAAamB,OAAQnB,EAAavC,SAAU6F,IAHzF,6BAOA,cAAC,IAAD,CAAce,GAAG,eAOZI,OAAMC,KAAKhC,ICzIpBiC,GAA0BlK,YAAOgI,IAAPhI,CAAH,yHAsDdmK,GA9CuB,SAAC,GAMhC,IALL/E,EAKI,EALJA,KACA8C,EAII,EAJJA,QAII,IAHJhG,sBAGI,MAHa,EAGb,MAFJmD,mBAEI,SADJ8C,EACI,EADJA,iBAEQhE,EAAMC,cAAND,EADJ,EAEgChF,oBAAS,GAFzC,mBAEGiL,EAFH,KAEeC,EAFf,KAIEC,EAAoBnG,EAAE,wEACtBoG,EAAkBpG,EACtB,uGANE,EAS2CsB,aAAWJ,EAAckF,EAAkBD,EAAmB,CAC3G5E,UAAW,eADLC,EATJ,EASIA,UAAWC,EATf,EASeA,QAASC,EATxB,EASwBA,eAI5B,OACE,eAAC,IAAD,WACE,eAACqE,GAAD,WACE,eAAC,IAAD,CAAMtD,WAAW,SAAjB,UACGvB,EAAc,cAAC,GAAD,IAAyB,cAAC,GAAD,IACvCQ,GAAkBD,EACnB,cAAC,IAAD,CAAKiB,IAAKlB,EAAV,SACE,cAAC,IAAD,CAAUiE,GAAG,MAAM9C,MAAM,OAAOC,OAAO,OAAOhE,MAAM,oBAGxD,cAAC,IAAD,CAAiByH,SAAUJ,EAAYnD,QAAS,kBAAMoD,GAAeD,IAArE,SACgBjG,EAAbiG,EAAe,OAAY,gBAG/BA,GACC,cAAC,GAAD,CACEhF,KAAMA,EACN8C,QAASA,EACThG,eAAgBA,EAChBmD,YAAaA,EACb8C,iBAAkBA,QC3DtBsC,GAAUzK,YAAO0K,IAAP1K,CAAH,gDACG,gBAAGwF,EAAH,EAAGA,WAAwBpF,GAA3B,EAAeC,WAAf,EAA2BD,OAA3B,OACZoF,EAAa,UAAYpF,EAAME,OAAOqK,WAsC3BC,GA9BV,SAAC,GAAyF,IAAvF1G,EAAsF,EAAtFA,mBAAoB2G,EAAkE,EAAlEA,mBAAkE,IAA9CrF,kBAA8C,aAA1BH,mBAA0B,SACpFlB,EAAMC,cAAND,EACF2G,EAAe,UAAGD,EAAH,QAA4B9B,cAC3CgC,EAAoC,SAAvB7G,GAAwD,SAAvB2G,EAYpD,OACE,cAACJ,GAAD,CAASjF,WAAYA,EAAYzC,MAAM,UAAvC,SACE,eAAC,IAAD,CAAM6D,WAAW,SAAS3B,eAAe,gBAAzC,UACE,eAAC,IAAD,CAAMyE,cAAc,SAApB,UACE,cAAC,IAAD,CAAS3G,MAAOyC,EAAa,eAAiB,OAAQwF,KAAK,KAA3D,wBACW9G,EADX,UAGA,cAAC,IAAD,CAAMnB,MAAOyC,EAAa,eAAiB,aAA3C,SAhBFH,EACI,GAAN,OAAUlB,EAAE,wBAEV4G,EACI,GAAN,OAAU5G,EAAE,0BAER,GAAN,OAAUA,EAAE,SAAZ,YAAwB0G,QAYpB,cAAC,IAAD,CAAOI,IAAG,wBAAmBH,GAAgBI,IAAKhH,EAAoB4C,MAAO,GAAIC,OAAQ,W,8FCuBlFoE,GAhDuC,SAAC,GAAiC,IAA/B/F,EAA8B,EAA9BA,KAA8B,IAAxBgG,iBAAwB,SAC7EC,EAAmDjG,EAAnDiG,OAAQ/F,EAA2CF,EAA3CE,aAAcC,EAA6BH,EAA7BG,aAAcC,EAAeJ,EAAfI,WACpCrB,EAAMC,cAAND,EACFmH,EAAuBC,aAASjG,EAAaU,QAAUC,YAAWX,EAAaU,SAAW,IAHX,EAInC7G,oBAAS,GAJ0B,mBAI9EqM,EAJ8E,KAI3DC,EAJ2D,KAK7EC,ECUoB,SAACC,EAAsBN,GACnD,IAAMO,EAAWC,eACT3D,EAAY4D,cAAZ5D,QACF6D,EAAmBC,aAAYX,GAYrC,MAAO,CAAEK,UAVaO,sBAAW,wBAAC,6BAAAC,EAAA,+EAEbC,aAAQR,EAAYI,EAAkB7D,GAFzB,cAExBkE,EAFwB,OAG9BR,EAASS,aAAoBhB,EAAQnD,IAHP,kBAIvBkE,GAJuB,0DAMvB,GANuB,yDAQ/B,CAAClE,EAAS0D,EAAUD,EAAYI,EAAkBV,KDvB/BiB,CAAehB,EAAsBD,GAAnDK,UAL6E,EAMhDa,eAA7BC,EAN6E,EAM7EA,aAAcC,EAN+D,EAM/DA,WAEhBC,EAAgBT,sBAAW,wBAAC,uBAAAC,EAAA,sEAE9BT,GAAqB,GAFS,SAGTC,IAHS,eAK5Bc,EAAa,GAAD,OAAIrI,EAAE,qBAAN,UAAgCA,EAAE,4BAAD,OAA6BoB,EAAamB,OAA1C,aAC7C+E,GAAqB,KAGrBgB,EAAW,GAAD,OACLtI,EAAE,UADG,UAELA,EAAE,wFAEPsH,GAAqB,IAbO,gDAgB9BkB,QAAQlN,MAAR,MACAgN,EAAW,QAAD,kCAAU,KAAGG,SAjBO,yDAmB/B,CAAClB,EAAWD,EAAsBe,EAAcC,EAAYtI,EAAGoB,IAElE,OACE,mCACG6F,EACC,cAAC,IAAD,CAAUtE,MAAM,OAAOC,OAAO,SAE9B,cAAC,IAAD,CACEqE,UAAWI,EACXqB,QAASrB,EAAoB,cAAC,IAAD,CAAesB,MAAI,EAAC/J,MAAM,iBAAoB,KAC3EgK,SAAUvH,GAAcgG,EACxBvE,QAASyF,EACT5F,MAAM,OALR,SAOG3C,EAAE,e,UE3CP6I,GAAahN,YAAOiN,IAAPjN,CAAH,4CAuCDkN,GAnCmD,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,YAAapJ,EAAgB,EAAhBA,UACxEI,EAAMC,cAAND,EACA/D,EAAUgN,eAAVhN,MAER,OACE,eAAC,IAAD,CACEsE,MAAK,UAAKyI,EAAL,YAAoBhJ,EAAE,aAC3BJ,UAAWA,EACXsJ,iBAAkBjN,EAAME,OAAOC,UAAU+M,WAH3C,UAKE,cAAC,IAAD,CAAMvK,MAAM,UAAUI,MAAI,EAA1B,SACGgB,EAAE,qCAAsC,CAAEoJ,YAAaJ,MAE1D,cAAC,IAAD,CAAMnI,GAAG,OAAT,SAAiBb,EAAE,wDAAoD,CAAEoJ,YAAaJ,MACtF,cAAC,IAAD,UACGhJ,EAAE,4FAAwF,CACzFoJ,YAAaJ,MAGjB,eAAC,IAAD,CAAQnI,GAAG,OAAOwI,GAAG,IAAIC,UAAQ,EAACvI,KAAMqB,IAAxC,UACGpC,EAAE,OADL,IACcgJ,KAEd,cAACH,GAAD,CAAY9H,KAAK,yBAAyBuI,UAAQ,EAAlD,SACE,eAAC,IAAD,CAAQvG,QAAQ,YAAYlC,GAAG,MAAM8B,MAAM,OAA3C,UACG3C,EAAE,iBACH,cAAC,IAAD,CAAapB,MAAM,UAAU6G,GAAG,aAGpC,cAAC,IAAD,CAAQ1C,QAAQ,OAAOD,QAASlD,EAAhC,SACGI,EAAE,sBCrBEuJ,GAAe,SAACrC,GAAgC,IAAxBsC,EAAuB,wDACpD/B,EAAWC,eADyC,EAEtCC,cAAZ5D,EAFkD,EAElDA,QACF0F,EAAqBC,eACrB9B,EAAmBC,aAAYX,GAE/ByC,EAAc7B,sBAAW,yCAC7B,WAAO8B,EAAgB/K,GAAvB,UAAAkJ,EAAA,yDACiB,IAAXb,EADN,gCAEU2C,aAAMJ,EAAoB,EAAGG,EAAQ7F,GAF/C,kCAGayF,EAHb,iCAIUM,aAAalC,EAAkBgC,EAAQ7F,GAJjD,gDAMUgG,aAAUnC,EAAkBgC,EAAQ/K,EAAUkF,GANxD,QAQE0D,EAASuC,aAAwB9C,EAAQnD,IACzC0D,EAASwC,aAAkB/C,EAAQnD,IATrC,4CAD6B,wDAY7B,CAACA,EAAS0D,EAAU+B,EAAYC,EAAoB7B,EAAkBV,IAGxE,MAAO,CAAEgD,QAASP,IChBdQ,GAAW,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,ICrBhCC,GAAevO,YAAOwO,IAAPxO,CAAH,6CAYHyO,GAR2C,SAAC,GAA2B,IAAzB7N,EAAwB,EAAxBA,SAAUqG,EAAc,EAAdA,QACrE,OACE,cAACsH,GAAD,CAAcpH,MAAM,KAAKuH,GAAG,MAAMC,EAAE,WAAWzH,QAAQ,WAAWD,QAASA,EAA3E,SACGrG,KCQDoM,GAAahN,YAAOiN,IAAPjN,CAAH,4CAkID4O,GA9H+B,SAAC,GAOxC,IANLC,EAMI,EANJA,UACAzJ,EAKI,EALJA,KACA0J,EAII,EAJJA,WACA/N,EAGI,EAHJA,kBAGI,IAFJgO,uBAEI,SADJhL,EACI,EADJA,UAEQsH,EAAuCjG,EAAvCiG,OAAQ/F,EAA+BF,EAA/BE,aAAcC,EAAiBH,EAAjBG,aACtBpB,EAAMC,cAAND,EACA/D,EAAUgN,eAAVhN,MAEAiO,EAAYX,GAAarC,EAAQwD,GAAjCR,QACAW,EFToB,SAAC3D,GAC7B,IAAMO,EAAWC,eACT3D,EAAY4D,cAAZ5D,QACF0F,EAAqBC,eACrB9B,EAAmBC,aAAYX,GAC/B4D,EAAaX,GAASY,SAAS7D,GAqBrC,MAAO,CAAE2D,UAnBa/C,sBAAW,yCAC/B,WAAO8B,EAAgB/K,GAAvB,oBAAAkJ,EAAA,yDACiB,IAAXb,EADN,gCAEyB8D,aAAQvB,EAAoB,EAAGG,EAAQ7F,GAFhE,OAEUkH,EAFV,OAGIzC,QAAQ0C,KAAKD,GAHjB,2BAIaH,EAJb,kCAKyBK,aAAqBvD,EAAkBgC,EAAQ7F,GALxE,QAKUkH,EALV,OAMIzC,QAAQ0C,KAAKD,GANjB,yCAQyBG,aAAYxD,EAAkBgC,EAAQ/K,EAAUkF,GARzE,QAQUkH,EARV,OASIzC,QAAQ0C,KAAKD,GATjB,QAWExD,EAASuC,aAAwB9C,EAAQnD,IACzC0D,EAASwC,aAAkB/C,EAAQnD,IACnC0D,EAAS4D,aAAwBnE,EAAQnD,IAb3C,4CAD+B,wDAgB/B,CAACA,EAAS0D,EAAUqD,EAAYrB,EAAoB7B,EAAkBV,KEdlDoE,CAAepE,GAA7B2D,UANJ,EAOiCzC,eAA7BC,EAPJ,EAOIA,aAAcC,EAPlB,EAOkBA,WAPlB,EAS8BtN,oBAAS,GATvC,mBASGuQ,EATH,KAScC,EATd,OAUkCxQ,mBAAS,IAV3C,mBAUGyQ,EAVH,KAUgBC,EAVhB,OAW0B1Q,mBAAS,GAXnC,mBAWG2Q,EAXH,KAWYC,EAXZ,KAaEC,EAAiBJ,GAAeK,YAAa,IAAI7O,IAAUwO,GAAavO,MAAMN,GAAmBY,YAUjGuO,EAAsB,SAACC,GAC3B,IAAMC,EAAyBtB,EAAWuB,UAAU,KAAKC,aAAaH,GAChEI,EAAgBC,YAAsBJ,EAAwB9K,EAAatC,SAAUsC,EAAatC,UACxG6M,EAAeU,GACfR,EAAWI,IAGPM,EAAkB,yCAAG,uBAAAvE,EAAA,yDACzByD,GAAa,IAETZ,EAHqB,0CAMfC,EAAUY,EAAatK,EAAatC,UANrB,OAOrBwJ,EAAa,GAAD,OACPrI,EAAE,YADK,KAEVA,EAAE,QAAD,OAASoB,EAAamB,OAAtB,wDAEHiJ,GAAa,GACb5L,IAZqB,kDAcrB0I,EAAWtI,EAAE,YAAaA,EAAE,kDAC5BwL,GAAa,GAfQ,2DAoBftB,EAAQuB,EAAatK,EAAatC,UApBnB,QAqBrBwJ,EAAa,GAAD,OAAIrI,EAAE,UAAN,KAAoBA,EAAE,QAAD,OAASmB,EAAaoB,OAAtB,0CACjCiJ,GAAa,GACb5L,IAvBqB,mDAyBrB0I,EAAWtI,EAAE,YAAaA,EAAE,kDAC5BwL,GAAa,GA1BQ,kEAAH,qDA+BxB,OACE,eAAC,IAAD,CACEjL,MAAyBP,EAAlB4K,EAAoB,UAAe,iBAC1ChL,UAAWA,EACXsJ,iBAAkBjN,EAAME,OAAOC,UAAU+M,WAH3C,UAKE,eAAC,IAAD,CAAM1G,WAAW,SAAS3B,eAAe,gBAAgBL,GAAG,MAA5D,UACE,eAAC,IAAD,CAAMzB,MAAI,EAAV,UAA8BgB,EAAlB4K,EAAoB,UAAe,SAA/C,OACA,eAAC,IAAD,CAAMnI,WAAW,SAAS8J,SAAS,OAAnC,UACE,cAAC,IAAD,CAAOzF,IAAG,yBAAoB3F,EAAaoB,OAAjC,QAA+CI,MAAO,GAAIC,OAAQ,GAAImE,IAAK5F,EAAaoB,SAClG,cAAC,IAAD,CAAMkD,GAAG,MAAMzG,MAAI,EAAnB,SACGmC,EAAaoB,eAIpB,cAAC,IAAD,CACEhH,MAAOkQ,EACPe,SA/DyB,SAACC,GAC9B,IAAMC,EAAaD,EAAME,OAAOpR,OAAS,IACnCqR,EAAiBC,YAAiB,IAAI5P,IAAUyP,GAAavL,EAAatC,UAC1EiO,EAAa7K,KAAK8K,MAAMH,EAAeV,UAAUvB,GAAYwB,aAAa,KAAK3O,YACrFkO,EAAegB,GACfd,EAAW3J,KAAK+K,IAAIF,EAAY,OA2D5BG,cAAa,WAAMpB,GAAkB,EAAxB,UAEf,eAAC,IAAD,CAAMhL,GAAG,MAAM4E,GAAG,OAAO7G,MAAM,aAAaD,SAAS,OAAO8B,GAAG,MAA/D,sBACY4L,YAAsB1B,EAAYxJ,EAAatC,aAE3D,cAAC,IAAD,CACEmO,IAAK,EACL5H,IAAK,IACL7J,MAAOoQ,EACPuB,eAAgBnB,EAChBoB,KAAK,QACLC,WAAU,UAAKzB,EAAL,KACV0B,KAAM,IAER,eAAC,IAAD,CAAM5K,WAAW,SAAS3B,eAAe,gBAAgBD,GAAG,MAA5D,UACE,cAAC,GAAD,CAAkBiC,QAAS,kBAAMiJ,EAAoB,KAArD,iBACA,cAAC,GAAD,CAAkBjJ,QAAS,kBAAMiJ,EAAoB,KAArD,iBACA,cAAC,GAAD,CAAkBjJ,QAAS,kBAAMiJ,EAAoB,KAArD,iBACA,cAAC,GAAD,CAAkBjJ,QAAS,kBAAMiJ,EAAoB,MAArD,oBAEF,cAAC,IAAD,CACE9E,UAAWsE,EACX7C,QAAS6C,EAAY,cAAC,IAAD,CAAe5C,MAAI,EAAC/J,MAAM,iBAAoB,KACnEkE,QAASwJ,EACT1D,UAAW6C,GAA2C,IAA5BpN,WAAWoN,GACrC5K,GAAG,OALL,SAOeb,EAAZuL,EAAc,aAAkB,cAEjCX,GACA,cAAC,GAAD,CAAYtB,UAAQ,EAACvI,KAAMqB,IAA3B,SACE,eAAC,IAAD,CAAQO,MAAM,OAAO9B,GAAG,MAAMkC,QAAQ,YAAtC,UACG/C,EAAE,OADL,IACcmB,EAAaoB,gBCnDtB+K,GAjEkC,SAAC,GAQ3C,IAPLrM,EAOI,EAPJA,KACAsM,EAMI,EANJA,oBACA3Q,EAKI,EALJA,kBACA4Q,EAII,EAJJA,cACA9C,EAGI,EAHJA,UACA+C,EAEI,EAFJA,SAEI,IADJxG,iBACI,SACI9F,EAAyDF,EAAzDE,aAAcC,EAA2CH,EAA3CG,aAAcsM,EAA6BzM,EAA7ByM,aAAcrM,EAAeJ,EAAfI,WAC1CrB,EAAMC,cAAND,EACF2N,EAAiBd,YAAiB,IAAI5P,IAAUyQ,GAAetM,EAAavC,UAC5E8L,EACJ+C,GAAgBH,EAAoBK,cAAcD,GAAkBA,EAAiBJ,EACjFM,EAAmB/B,YAAa/J,YAAiByL,EAAerM,EAAatC,UAAW,EAAG,GAC3FiP,EAAwBhC,YAC5B/J,YAAiByL,EAAcrB,aAAavP,GAAoBuE,EAAatC,WAR3E,EAW6ByD,YAAS,cAAC,GAAD,CAAsB0G,YAAa7H,EAAaoB,UAAnFwL,EAXH,sBAaqBzL,YACvB,cAAC,GAAD,CAAYqI,WAAYA,EAAYD,UAAWA,EAAWzJ,KAAMA,EAAMrE,kBAAmBA,KADpFoR,EAbH,sBAiBuB1L,YACzB,cAAC,GAAD,CACEqI,WAAY6C,EACZ9C,UAAWA,EACXzJ,KAAMA,EACNrE,kBAAmBA,EACnBgO,iBAAe,KANZqD,EAjBH,oBAsDJ,OAAO,cAAC,IAAD,CAAM1I,cAAc,SAApB,SAA8B0B,EAAY,cAAC,IAAD,CAAUtE,MAAM,OAAOC,OAAO,SA1BtE6K,EACL,eAAC,IAAD,CAAM3M,eAAe,gBAAgB2B,WAAW,SAAhD,UACE,eAAC,IAAD,CAAM8C,cAAc,SAApB,UACE,cAAC,IAAD,UAAUsI,IACV,cAAC,IAAD,CAAMlP,SAAS,OAAOC,MAAM,aAA5B,oBAA8CkP,GAAyB,EAAvE,aAEF,eAAC,IAAD,WACE,cAAC,IAAD,CAAY/K,QAAQ,YAAYD,QAASmL,EAAkBvK,GAAG,MAA9D,SACE,cAAC,IAAD,CAAW9E,MAAM,UAAU+D,MAAM,WAEnC,cAAC,IAAD,CACEI,QAAQ,YACRD,QAASyK,EAAoBW,GAAG,GAAKF,EAAiBD,EACtDnF,SAAUvH,EAHZ,SAKE,cAAC,IAAD,CAASzC,MAAM,UAAU+D,MAAM,OAAOC,OAAO,iBAKnD,cAAC,IAAD,CAAQgG,SAAUvH,EAAYyB,QAASyK,EAAoBW,GAAG,GAAKF,EAAiBD,EAApF,SACG/N,EAAE,c,UCiDImO,GAxGmC,SAAC,GAS5C,IARLN,EAQI,EARJA,iBACAO,EAOI,EAPJA,YACAhN,EAMI,EANJA,aACAiN,EAKI,EALJA,oBACAnH,EAII,EAJJA,OACAwD,EAGI,EAHJA,UAGI,IAFJ4D,sBAEI,SADJ1O,EACI,EADJA,UAEQI,EAAMC,cAAND,EACA/D,EAAUgN,eAAVhN,MAFJ,EAGiCmM,eAA7BC,EAHJ,EAGIA,aAAcC,EAHlB,EAGkBA,WACdiG,EAAaC,aAAetH,EAAQwD,GAApC6D,SACArE,EAAYX,GAAarC,EAAQwD,GAAjCR,QALJ,EAM8BlP,oBAAS,GANvC,mBAMGuQ,EANH,KAMcC,EANd,OAOwCxQ,mBAASsT,GAPjD,mBAOGG,EAPH,KAOmBC,EAPnB,OAQ2CpN,aAC7C,qCACE,cAAC,IAAD,CAAMb,GAAG,OAAT,SAAiBT,EAAE,mDACnB,cAAC,IAAD,UAAOA,EAAE,iDAEX,CAAEuB,UAAW,aAAcoN,cAAe,CAAC,GAAI,MALzCnN,EARJ,EAQIA,UAAWC,EARf,EAQeA,QAASC,EARxB,EAQwBA,eAQtBkN,EAAoB,yCAAG,uBAAA7G,EAAA,yDAC3ByD,GAAa,IAETiD,EAHuB,0CAKjBvE,EAAQkE,EAAahN,EAAavC,UALjB,OAMvBwJ,EAAa,GAAD,OACPrI,EAAE,cADK,KAEVA,EAAE,QAAD,OAASoB,EAAamB,OAAtB,oDAEHiJ,GAAa,GACb5L,IAXuB,kDAavB0I,EAAWtI,EAAE,YAAaA,EAAE,kDAC5BwL,GAAa,GAdU,2DAmBjB+C,IAnBiB,QAoBvBlG,EAAa,GAAD,OAAIrI,EAAE,aAAN,KAAuBA,EAAE,QAAD,OAASoB,EAAamB,OAAtB,8CACpCiJ,GAAa,GACb5L,IAtBuB,mDAwBvB0I,EAAWtI,EAAE,YAAaA,EAAE,kDAC5BwL,GAAa,GAzBU,kEAAH,qDA8B1B,OACE,eAAC,IAAD,CACEjL,MAAK,UAAKa,EAAamB,OAAlB,YAA4BvC,EAAE,YACnCJ,UAAWA,EACXsJ,iBAAkBjN,EAAME,OAAOC,UAAU+M,WAH3C,UAKGmF,GACC,eAAC,IAAD,CAAMxN,eAAe,SAAS2B,WAAW,SAAShC,GAAG,OAArD,UACE,eAAC,IAAD,CACEoO,YAAaJ,EAAiB,EAAI,EAClCzL,MAAM,KACND,QAAQ,SACR+L,YAAa,SAACC,GAAD,OAAWL,GAAmBK,IAJ7C,UAME,cAAC,IAAD,CAAgB1F,GAAG,SAAnB,SAA6BrJ,EAAE,cAC/B,cAAC,IAAD,CAAgBqJ,GAAG,SAAnB,SAA6BrJ,EAAE,gBAEjC,cAAC,IAAD,CAAMyF,GAAG,OAAO/C,IAAKlB,EAArB,SACE,cAAC,IAAD,CAAU5C,MAAM,iBAEjB8C,GAAkBD,KAIvB,eAAC,IAAD,CAAMX,eAAe,gBAAgB2B,WAAW,SAAShC,GAAG,OAA5D,UACE,eAAC,IAAD,WAAwBT,EAAjByO,EAAmB,cAAmB,cAA7C,OACA,eAAC,IAAD,CAAMlJ,cAAc,SAApB,UACE,eAAC,IAAD,WACGsI,EADH,IACsBzM,EAAamB,UAEnC,cAAC,IAAD,CAAM5D,SAAS,OAAOC,MAAM,aAA5B,oBAA8CyP,GAAuB,EAArE,gBAIJ,cAAC,IAAD,CACExN,GAAG,MACHiC,QAAS8L,EACT3H,UAAWsE,EACX7C,QAAS6C,EAAY,cAAC,IAAD,CAAe5C,MAAI,EAAC/J,MAAM,iBAAoB,KAJrE,SAMeoB,EAAZuL,EAAc,aAAkB,aAEnC,cAAC,IAAD,CAAQxI,QAAQ,OAAOD,QAASlD,EAAWoP,GAAG,MAA9C,SACGhP,EAAE,sBCzDIiP,GAtDuC,SAAC,GAMhD,IALLC,EAKI,EALJA,SACA9N,EAII,EAJJA,aACA8F,EAGI,EAHJA,OACAwD,EAEI,EAFJA,UAEI,IADJzD,iBACI,SACIjH,EAAMC,cAAND,EACF2B,EAAoBC,YAAeR,EAAaS,QAAUC,YAAWV,EAAaS,SAAW,IAC7FuM,EAAc/B,YAAsB6C,EAAU9N,EAAavC,UAC3DgP,EAAmB/B,YAAa/J,YAAiBmN,EAAU9N,EAAavC,UAAW,EAAG,GACtFwP,EAAsBvC,YAC1B/J,YAAiBmN,EAAS/C,aAAaxK,GAAoBP,EAAavC,WAEpEsQ,EAAcD,EAAS1R,WAAa,EACpC8Q,EAA4B,IAAXpH,EATnB,EAWuB5E,YACzB,cAAC,GAAD,CACEuL,iBAAkBA,EAClBO,YAAaA,EACbhN,aAAcA,EACdiN,oBAAqBA,EACrBnH,OAAQA,EACRwD,UAAWA,EACX4D,eAAgBA,KARbc,EAXH,oBAuBJ,OACE,cAAC,IAAD,CAAM7J,cAAc,SAAS9E,GAAG,OAAhC,SACE,eAAC,IAAD,CAAMK,eAAe,gBAAgB2B,WAAW,SAAhD,UACE,cAAC,IAAD,CAAM8C,cAAc,SAApB,SACG0B,EACC,cAAC,IAAD,CAAUtE,MAAM,OAAOC,OAAO,SAE9B,qCACE,cAAC,IAAD,CAAShE,MAAOuQ,EAAc,OAAS,eAAvC,SAAwDA,EAActB,EAAmB,IACzF,cAAC,IAAD,CAAMlP,SAAS,OAAOC,MAAOuQ,EAAc,aAAe,eAA1D,oBACOA,EAAcd,EAAsB,EAD3C,eAMN,cAAC,IAAD,UACE,cAAC,IAAD,CAAQzF,UAAWuG,EAAarM,QAASsM,EAAzC,SACoBpP,EAAjBsO,EAAmB,UAAe,qBCrDzCe,GAAaxT,YAAOyT,IAAPzT,CAAH,gDA4ED0T,GAjEiC,SAAC,GAK1C,IAJLtO,EAII,EAJJA,KACAuM,EAGI,EAHJA,cACAgC,EAEI,EAFJA,wBACA5S,EACI,EADJA,kBAEQsK,EAAwEjG,EAAxEiG,OAAQ/F,EAAgEF,EAAhEE,aAAcC,EAAkDH,EAAlDG,aAAcqO,EAAoCxO,EAApCwO,QAASC,EAA2BzO,EAA3ByO,aAAcC,EAAa1O,EAAb0O,SAE7DjF,EAAYgF,IAAiBE,KAAaC,QACxC7P,EAAMC,cAAND,EACF8P,EAAY,IAAI7S,KAAkB,OAAR0S,QAAQ,IAARA,OAAA,EAAAA,EAAUG,YAAa,GACjDvC,EAAsB,IAAItQ,KAAkB,OAAR0S,QAAQ,IAARA,OAAA,EAAAA,EAAUpC,sBAAuB,GACrE2B,EAAW,IAAIjS,KAAkB,OAAR0S,QAAQ,IAARA,OAAA,EAAAA,EAAUI,gBAAiB,GACpDC,GAAiBR,IAA4BM,EAAU5B,GAAG,KAAOxD,EACjE+C,EAAWD,EAAcU,GAAG,GAC5BjH,GAAa0I,EAEnB,OACE,cAAC,IAAD,CAAMpK,cAAc,SAApB,SACE,eAAC,IAAD,CAAMA,cAAc,SAApB,UACGkK,GACC,qCACE,eAAC,IAAD,CAAKQ,QAAQ,SAAb,UACE,cAACZ,GAAD,CAAYzQ,MAAM,YAAY4B,cAAc,YAAYxB,MAAI,EAACL,SAAS,OAAtE,mBACMyC,EAAamB,OADnB,OAGA,cAAC8M,GAAD,CAAYzQ,MAAM,aAAa4B,cAAc,YAAYxB,MAAI,EAACL,SAAS,OAAvE,SACGqB,EAAE,eAGP,cAAC,GAAD,CACEkP,SAAUA,EACV9N,aAAcA,EACd8F,OAAQA,EACRwD,UAAWA,EACXzD,UAAWA,OAIjB,eAAC,IAAD,CAAKgJ,QAAQ,SAAb,UACE,eAACZ,GAAD,CAAYzQ,MAAO6O,EAAW,YAAc,aAAcjN,cAAc,YAAYxB,MAAI,EAACL,SAAS,OAAlG,UACG8O,EAAWtM,EAAaoB,OAASvC,EAAE,SAAU,OAEhD,cAACqP,GAAD,CAAYzQ,MAAO6O,EAAW,aAAe,YAAajN,cAAc,YAAYxB,MAAI,EAACL,SAAS,OAAlG,SACG8O,EAAWzN,EAAE,UAAL,UAAoBmB,EAAaoB,aAG7CyN,EACC,cAAC,GAAD,CAAgB/O,KAAMA,EAAMgG,UAAWA,IAEvC,cAACiJ,GAAD,CACEjJ,UAAWA,EACXhG,KAAMA,EACNsM,oBAAqBA,EACrB3Q,kBAAmBA,EACnB4Q,cAAeA,EACf9C,UAAWA,EACX+C,SAAUA,UCtBP0C,GA3C6C,SAAC,GAAuB,IAArBlP,EAAoB,EAApBA,KAAM8C,EAAc,EAAdA,QAC3DmD,EAA6DjG,EAA7DiG,OAAQ/F,EAAqDF,EAArDE,aAAcC,EAAuCH,EAAvCG,aAAcC,EAAyBJ,EAAzBI,WAAYsO,EAAa1O,EAAb0O,SAChD3P,EAAMC,cAAND,EACFwN,EAAgB,IAAIvQ,KAAkB,OAAR0S,QAAQ,IAARA,OAAA,EAAAA,EAAUnC,gBAAiB,GACzDgC,GAAuC,OAAbhC,QAAa,IAAbA,OAAA,EAAAA,EAAehQ,YAAa,EACtDZ,EAAoBgF,YAAeT,EAAaU,QAAUC,YAAWX,EAAaU,SAAW,IAEnG,OACE,eAAC,GAAD,CACEuB,WAAY/B,GAAcmO,EAC1BnO,WAAYA,GAAyB,IAAX6F,EAC1BkJ,OAAQ/O,GAAc,cAAC,IAAD,CAAYgP,aAAa,eAAeC,KAAI,UAAKtQ,EAAE,eAH3E,UAKE,cAAC,GAAD,CACED,mBAAoBqB,EAAamB,OACjCmE,mBAAoBvF,EAAaoB,OACjClB,WAAYA,GAAyB,IAAX6F,IAE5B,eAAC,IAAD,WACE,cAAC,GAAD,CAAQjG,KAAMA,EAAMrE,kBAAmBA,IACvC,cAAC,IAAD,CAAMiE,GAAG,OAAO0E,cAAc,SAA9B,SACGxB,EACC,cAAC,GAAD,CACE9C,KAAMA,EACNuM,cAAeA,EACf5Q,kBAAmBA,EACnB4S,wBAAyBA,IAG3B,qCACE,cAAC,IAAD,CAAM/O,GAAG,OAAOD,cAAc,YAAY7B,SAAS,OAAOC,MAAM,aAAaI,MAAI,EAAjF,SACGgB,EAAE,mBAEL,cAACuQ,EAAA,EAAD,YAKR,cAACC,GAAD,CAAYvP,KAAMA,EAAM8C,QAASA,Q,mBChBxB0M,GA9Ba,SAACC,GAA0B,IAC7C3M,EAAY4D,cAAZ5D,QACF4M,EAAoBC,eAF0B,EAGpB5V,mBAAS,CACvC6V,OAAQC,KACRC,qBAAsBD,KACtBE,kBAAmB,GACnBC,mBAAoB,KAP8B,mBAG7CC,EAH6C,KAGnCC,EAHmC,KA2BpD,OAjBA1V,qBAAU,WAYJsI,GAVoB,yCAAG,6BAAAgE,EAAA,sEACM4I,EAAkBS,QAAQF,SAASnN,GAASsN,OADlD,OACnBC,EADmB,OAEzBH,EAAY,CACVN,OAAQ,IAAI5T,IAAUqU,EAAiBT,QACvCE,qBAAsB,IAAI9T,IAAUqU,EAAiBP,sBACrDC,kBAAmBM,EAAiBN,kBACpCC,mBAAoBK,EAAiBL,qBANd,2CAAH,oDAWtBM,KAED,CAACxN,EAAS4M,EAAmBD,IAEzBQ,GC9BIM,GAAsB,SACjCX,EACAY,GAGI,IAFJ5S,EAEG,uDAFQ,GACX6S,EACG,uDADe,EAEZC,EAAmB5P,YAAiB0P,EAAkB5S,GACtD+S,EAAe,IAAI3U,IAAU4T,EAAO1E,aAAawF,IACjDE,EAAsB9P,YAAiB6P,EAAc/S,GACrDiT,EAAkBjF,YAAiB,IAAI5P,IAAU4U,GAAsBhT,GACvEkT,EAAuB1F,YAAsBuF,EAAc/S,EAAU6S,GAC3E,MAAO,CAAEG,sBAAqBC,kBAAiBC,yBAGpCC,GAAsB,SACjCC,EACAR,GAGI,IAFJ5S,EAEG,uDAFQ,GACX6S,EACG,uDADe,EAEZC,EAAmB5P,YAAiB0P,EAAkB5S,GACtDqT,EAAiB,IAAIjV,IAAUgV,EAAK/F,UAAUyF,IAC9CQ,EAAwBpQ,YAAiBmQ,EAAgBrT,GACzDuT,EAAoBvF,YAAiB,IAAI5P,IAAUkV,GAAwBtT,GAC3EwT,EAAyBhG,YAAsB6F,EAAgBrT,EAAU6S,GAC/E,MAAO,CAAES,wBAAuBC,oBAAmBC,2B,UCGtCC,GAzBe,SAAC5B,GAC7B,IAAMC,EAAoBC,eAD4B,EAEhB5V,mBAAS,MAFO,mBAE/CuX,EAF+C,KAElCC,EAFkC,OAGNxX,mBAAS,MAHH,mBAG/CgJ,EAH+C,KAG7ByO,EAH6B,OAIJzX,mBAAS,MAJL,mBAI/C0X,EAJ+C,KAI5BC,EAJ4B,KAsBtD,OAhBAlX,qBAAU,YACY,yCAAG,yCAAAsM,EAAA,sEACc6K,aAAiB,CAClDjC,EAAkBS,QAAQyB,uBAAuBxB,KACjDV,EAAkBS,QAAQmB,cAAclB,OAHrB,mCACdyB,EADc,KACFjC,EADE,KAKfkC,EAAwB,IAAI9V,IAAU6V,GACtCE,EAAyB,IAAI/V,IAAU4T,GACvCoC,EAA2BzB,GAAoBwB,EAAwBD,GAC7EJ,EAAqBI,GACrBP,EAAeQ,GACfP,EAAoBQ,EAAyBnB,iBAVxB,4CAAH,qDAYpBoB,KACC,CAACvC,EAAmBD,IAEhB,CAAE6B,cAAavO,mBAAkB0O,sBCoB3BS,GArCS,WACtB,IAAMxC,EAAoBC,eADE,EAEJ5V,mBAAS,CAC/B+C,eAAgB,KAChBqV,QAAS,KACTC,cAAe,KACfC,oBAAqB,OANK,mBAErBC,EAFqB,KAEfC,EAFe,KAkC5B,OAzBA/X,qBAAU,YACK,yCAAG,uCAAAsM,EAAA,sEAMJ6K,aAAiB,CACzBjC,EAAkBS,QAAQrT,iBAAiBsT,KAC3CV,EAAkBS,QAAQqC,oBAAoBpC,KAC9CV,EAAkBS,QAAQgC,UAAU/B,KACpCV,EAAkBS,QAAQsC,cAAcrC,OAV5B,mCAEZsC,EAFY,KAGZC,EAHY,KAIZC,EAJY,KAKZC,EALY,KAadN,EAAQ,CACNzV,eAAgB4V,EAChBP,QAASS,EACTR,cAAeS,EACfR,oBAAqBM,IAjBT,2CAAH,qDAqBbG,KACC,CAACpD,IAEG4C,GCwDMS,GAhF2B,SAAC,GAMpC,IALL/S,EAKI,EALJA,KACArE,EAII,EAJJA,kBAII,KAHJsE,YAGI,EAFJpD,0BAEI,MAFgB,EAEhB,MADJC,sBACI,MADa,EACb,EACIiC,EAAMC,cAAND,EACAmB,EAAuEF,EAAvEE,aAAcC,EAAyDH,EAAzDG,aAActE,EAA2CmE,EAA3CnE,YAAauE,EAA8BJ,EAA9BI,WAAYtE,EAAkBkE,EAAlBlE,cAFzD,EAG2CuE,aAC7CtB,EAAE,6EACF,CAAEuB,UAAW,eAFPC,EAHJ,EAGIA,UAAWC,EAHf,EAGeA,QAASC,EAHxB,EAGwBA,eAKtBC,EAAoBC,YAAeR,EAAaS,QAAUC,YAAWV,EAAaS,SAAW,IAC7FxE,EAAMV,EACVC,EACA+E,EACAI,YAAiBjF,EAAaqE,EAAatC,UAC3CR,WAAWtB,IAIPiF,EAAmBC,KAAKC,MAAMP,EAAoB,KAAQ,EAsB1DQ,EACJhB,EAAaU,SAAb,UACGO,IADH,kCAC8CjB,EAAaU,QAAQQ,KAzCjE,EA2CwBC,YAC1B,cAAC,GAAD,CACE1E,WAAY+D,EACZtE,IAAKA,EACLwC,UAAS,UAAKG,EAAE,OAAP,YAAiBmB,EAAaoB,QACvCzC,SAAUqC,GAAgBC,IAC1BrC,mBAAoBqB,EAAamB,OACjC1E,iBAAkBmE,EAAmB,EAAI,EACzClE,kBAAmBA,EACnBC,eAAgBA,KATbyE,EA3CH,oBAwDJ,OACE,eAAC,IAAD,CAAMC,WAAW,SAAS3B,eAAe,gBAAzC,UACGY,GAAkBD,EACnB,eAAC,IAAD,CAAaiB,IAAKlB,EAAlB,UAA8BxB,EAAE,iBAAhC,OACCqB,IAAehE,EACd,cAAC,IAAD,CAAUsF,MAAM,OAAOC,OAAO,SAE9B,eAAC,IAAD,CAAMH,WAAW,SAAjB,gBAEE,cAAC,IAAD,CAAYK,QAASN,EAAmBO,QAAQ,OAAOC,MAAM,KAA7D,SACE,cAAC,IAAD,CAAepE,MAAM,aAAa+D,MAAM,kBC9CrCsR,GAxBqC,SAAC,GAE5C,IADLhT,EACI,EADJA,KAEMjB,EAAMC,cAAND,EADF,GAEyEiB,EAAvEE,aAAuEF,EAAzDG,aAAyDH,EAA3CnE,YAA2CmE,EAA9BI,WAA8BJ,EAAlBlE,cACduE,aAC7CtB,EAAE,qIACF,CAAEuB,UAAW,gBAFPC,EAHF,EAGEA,UAAWC,EAHb,EAGaA,QAASC,EAHtB,EAGsBA,eAK5B,OACE,eAAC,IAAD,CAAMe,WAAW,SAAS3B,eAAe,gBAAzC,UACGY,GAAkBD,EACnB,eAAC,IAAD,CAAaiB,IAAKlB,EAAlB,UAA8BxB,EAAE,wBAAhC,OACA,eAAC,IAAD,CAAMyC,WAAW,SAAjB,gBAEE,cAAC,IAAD,CAAYM,QAAQ,OAAOC,MAAM,KAAjC,SACE,cAAC,IAAD,CAAWpE,MAAM,aAAa+D,MAAM,kBCjB/BM,GApBIpH,YAAOqH,IAAPrH,CAAH,8RAGA,SAACa,GAAD,OAAWA,EAAMT,MAAMkH,KAAKjH,cAGjC,gBAAGmF,EAAH,EAAGA,WAAH,SAAepF,MAAkBE,OAAOkF,EAAa,eAAiB,gBACjE,qBAAG+B,UAEX,2BACA,iFAKJ,qBAAGnH,MAAkBoH,aAAaC,MCYhCM,GAAkB/H,YAAOgI,IAAPhI,CAAH,+EAOfiI,GAAgD,SAAC,GAMhD,IAAD,EALJ7C,EAKI,EALJA,KACA8C,EAII,EAJJA,QAII,IAHJhG,sBAGI,MAHa,EAGb,MAFJmD,mBAEI,SADJ8C,EACI,EADJA,iBAEQhE,EAAMC,cAAND,EACAiE,EAAiBC,cAAjBD,aACA9C,EAA+FF,EAA/FE,aAAcC,EAAiFH,EAAjFG,aAActE,EAAmEmE,EAAnEnE,YAAaqH,EAAsDlD,EAAtDkD,WAAYC,EAA0CnD,EAA1CmD,SAAU/C,EAAgCJ,EAAhCI,WAAYgD,EAAoBpD,EAApBoD,gBAE7EC,EAAelD,EAAaS,QAAUC,YAAWV,EAAaS,SAAW,GACzE0C,EAAsBzC,YAAWuC,GACjCG,EAA2BC,cAC3BC,EAAQ,UAAMC,IAAN,0BAAgCvD,EAAamB,OAAOqC,cAApD,QACRC,KAAqB,UAAEC,OAAuBC,gBAAzB,aAAC,EAAkCC,YAExDC,EAA2BC,SAAS7D,GAAc8C,GAAcC,GAChEe,EAAmBlD,KAAKmD,IAAIjB,EAAaF,EAAc,GACvDoB,EAAkBpD,KAAKmD,IAAIhB,EAAWH,EAAc,GACpDqB,EAAsC,IAArBH,GAA0BE,EAAkB,EAd/D,EAgB2C/D,aAC7CtB,EAAE,gEACF,CAAEuB,UAAW,eAFPC,EAhBJ,EAgBIA,UAAWC,EAhBf,EAgBeA,QAASC,EAhBxB,EAgBwBA,eAK5B,OACE,eAAC,GAAD,CAAiB6D,cAAc,SAA/B,UACE,eAAC,IAAD,CAAM9E,GAAG,MAAMK,eAAe,gBAAgB2B,WAAW,SAAzD,UACE,cAAC,IAAD,CAAM+C,OAAK,EAAX,SAAaxF,EAAE,mBACf,cAAC,IAAD,CAAMyC,WAAW,aAAjB,SACG3F,EACC,qCACE,cAAC,GAAD,CACE6B,SAAS,OACTpD,MACE2F,EACIa,YAAiBiC,EAAkB7C,EAAatC,UAChDkD,YAAiBjF,EAAaqE,EAAatC,YAGnD,cAAC,IAAD,CAAM4G,GAAG,MAAM9G,SAAS,OAAxB,SACGwC,EAAaoB,YAIlB,cAAC,IAAD,CAAUI,MAAM,OAAOC,OAAO,cAInCqC,GACC,eAAC,IAAD,CAAMxE,GAAG,MAAMK,eAAe,gBAAgB2B,WAAW,SAAzD,UACE,eAAC,IAAD,CAAM+C,OAAK,EAAX,UAA8BxF,EAAjBsF,EAAmB,MAAW,SAA3C,OACA,eAAC,IAAD,CAAM7C,WAAW,SAAjB,UACG4C,GAAmBF,EAClB,cAAC,GAAD,CACEvG,MAAM,UACND,SAAS,OACTpD,MAAO+J,EAAiBD,EAAkBF,EAC1CtG,SAAU,IAGZ,cAAC,IAAD,CAAU8D,MAAM,OAAOC,OAAO,SAEhC,cAAC,IAAD,CAAM6C,GAAG,MAAM7G,MAAM,UAAU4G,OAAK,EAApC,SACGxF,EAAE,YAEL,cAAC,IAAD,CAAWyF,GAAG,MAAM7G,MAAM,kBAI/BsC,GACC,eAAC,IAAD,CAAMT,GAAG,MAAMK,eAAe,gBAAgB2B,WAAW,SAAzD,UACGf,GAAkBD,EACnB,cAAC,IAAD,CAAaiB,IAAKlB,EAAWgE,OAAK,EAAlC,SACGxF,EAAE,qBAEL,cAAC,IAAD,CAAMyC,WAAW,SAAjB,SACE,eAAC,IAAD,CAAMgD,GAAG,MAAMD,OAAK,EAApB,UACGzH,EAAiB,IADpB,YAMN,cAAC,IAAD,CAAM0C,GAAG,MAAMK,eAAe,WAA9B,SACE,cAAC,IAAD,CAAc9B,MAAM,EAAOwG,OAAK,EAACzE,KAAMK,EAAasE,YAApD,SACG1F,EAAE,yBAGNuE,GACC,cAAC,IAAD,CAAM9D,GAAG,MAAMK,eAAe,WAA9B,SACE,cAAC,IAAD,CACE9B,MAAM,EACNwG,OAAK,EACLzE,KAAI,UAAK4E,IAAL,oBAAkCzE,EAAcsD,EAA2BD,GAHjF,SAKGvE,EAAE,qBAIR+D,GAAWc,GAAqBP,GAC/B,eAAC,IAAD,CAAMxD,eAAe,WAArB,UACE,cAAC,IAAD,CACElC,MAAM,UACN4G,OAAK,EACL1C,QAAS,kBAAM8C,aAActB,EAAclD,EAAamB,OAAQnB,EAAavC,SAAU6F,IAHzF,6BAOA,cAAC,IAAD,CAAce,GAAG,eAOZI,OAAMC,KAAKhC,ICzIpBiC,GAA0BlK,YAAOgI,IAAPhI,CAAH,2HAsDdmK,GA9CuB,SAAC,GAMhC,IALL/E,EAKI,EALJA,KACA8C,EAII,EAJJA,QAII,IAHJhG,sBAGI,MAHa,EAGb,MAFJmD,mBAEI,SADJ8C,EACI,EADJA,iBAEQhE,EAAMC,cAAND,EADJ,EAEgChF,oBAAS,GAFzC,mBAEGiL,EAFH,KAEeC,EAFf,KAIEC,EAAoBnG,EAAE,wEACtBoG,EAAkBpG,EACtB,uGANE,EAS2CsB,aAAWJ,EAAckF,EAAkBD,EAAmB,CAC3G5E,UAAW,eADLC,EATJ,EASIA,UAAWC,EATf,EASeA,QAASC,EATxB,EASwBA,eAI5B,OACE,eAAC,IAAD,WACE,eAAC,GAAD,WACE,eAAC,IAAD,CAAMe,WAAW,SAAjB,UACGvB,EAAc,cAAC,GAAD,IAAyB,cAAC,GAAD,IACvCQ,GAAkBD,EACnB,cAAC,IAAD,CAAKiB,IAAKlB,EAAV,SACE,cAAC,IAAD,CAAUiE,GAAG,MAAM9C,MAAM,OAAOC,OAAO,OAAOhE,MAAM,oBAGxD,cAAC,IAAD,CAAiByH,SAAUJ,EAAYnD,QAAS,kBAAMoD,GAAeD,IAArE,SACgBjG,EAAbiG,EAAe,OAAY,gBAG/BA,GACC,cAAC,GAAD,CACEhF,KAAMA,EACN8C,QAASA,EACThG,eAAgBA,EAChBmD,YAAaA,EACb8C,iBAAkBA,QC3DtBsC,GAAUzK,YAAO0K,IAAP1K,CAAH,kDACG,gBAAGwF,EAAH,EAAGA,WAAwBpF,GAA3B,EAAeC,WAAf,EAA2BD,OAA3B,OACZoF,EAAa,UAAYpF,EAAME,OAAOqK,WAsC3BC,GA9BV,SAAC,GAAyF,IAAvF1G,EAAsF,EAAtFA,mBAAoB2G,EAAkE,EAAlEA,mBAAkE,IAA9CrF,kBAA8C,aAA1BH,mBAA0B,SACpFlB,EAAMC,cAAND,EACF2G,EAAe,UAAGD,EAAH,QAA4B9B,cAC3CgC,EAAoC,SAAvB7G,GAAwD,SAAvB2G,EAYpD,OACE,cAAC,GAAD,CAASrF,WAAYA,EAAYzC,MAAM,UAAvC,SACE,eAAC,IAAD,CAAM6D,WAAW,SAAS3B,eAAe,gBAAzC,UACE,eAAC,IAAD,CAAMyE,cAAc,SAApB,UACE,cAAC,IAAD,CAAS3G,MAAOyC,EAAa,eAAiB,OAAQwF,KAAK,KAA3D,wBACW9G,EADX,UAGA,cAAC,IAAD,CAAMnB,MAAOyC,EAAa,eAAiB,aAA3C,SAhBFH,EACI,GAAN,OAAUlB,EAAE,wBAEV4G,EACI,GAAN,OAAU5G,EAAE,0BAER,GAAN,OAAUA,EAAE,SAAZ,YAAwB0G,EAAxB,uBAYI,cAAC,IAAD,CAAOI,IAAG,wBAAmBH,GAAgBI,IAAKhH,EAAoB4C,MAAO,GAAIC,OAAQ,WC4BlFoE,GApDuC,SAAC,GAA0D,IAAxD/F,EAAuD,EAAvDA,KAAM8C,EAAiD,EAAjDA,QAAiD,IAAxCkD,iBAAwC,SAArBiN,EAAqB,EAArBA,eACjF/S,EAAiBF,EAAjBE,aACFwP,EAAoBC,eACpBuD,EAAeC,eACbpU,EAAMC,cAAND,EAJsG,EAK5DhF,oBAAS,GALmD,mBAKvGqM,EALuG,KAKpFC,EALoF,OAMzEc,eAA7BC,EANsG,EAMtGA,aAAcC,EANwF,EAMxFA,WA2BtB,OACE,mCACGrB,EACC,cAAC,IAAD,CAAUtE,MAAM,OAAOC,OAAO,SAE9B,cAAC,IAAD,CACEqE,UAAWI,EACXqB,QAASrB,EAAoB,cAAC,IAAD,CAAesB,MAAI,EAAC/J,MAAM,iBAAoB,KAC3EgK,SAAUvB,EACVvE,QAlCc,WACpBqR,EAAa/C,QACVpJ,QAAQ2I,EAAkB0D,QAAQxS,QAASyS,KAAOC,UAAUC,YAC5DC,KAAK,CAAEC,KAAM3Q,IACb4Q,GAAG,WAAW,WACbrN,GAAqB,MAEtBqN,GAAG,WAAW,WACbtM,EAAa,GAAD,OACPrI,EAAE,qBADK,UAEPA,EAAE,2CAA4C,CAAEuC,OAAQpB,EAAaoB,WAE1E2R,IACA5M,GAAqB,MAEtBqN,GAAG,SAAS,SAACrZ,GACZkN,QAAQlN,MAAMA,GACdgN,EAAW,GAAD,OACLtI,EAAE,UADG,UAELA,EAAE,wFAEPsH,GAAqB,OAcnB3E,MAAM,OALR,SAOG3C,EAAE,eCxCE4U,GAlBe,SAAC5D,GAA6D,IAAlCsC,EAAiC,uDAAX,OAAW,EACzCtY,mBAAS,MADgC,mBAClF6Z,EADkF,KAChEC,EADgE,OAE3C9Z,oBAAS,GAFkC,mBAElF+Z,EAFkF,KAEjEC,EAFiE,KAezF,OAXAvZ,qBAAU,WACR,IAEMwZ,EAFuBjE,EAAoBsC,EACrCrR,KAAK8K,MAAMmI,KAAKC,MAAQ,KAENF,EAAuB,IAEnDH,EAAoBG,GACpBD,GAAmB,MAEpB,CAAChE,EAAmBsC,EAAqBwB,IAErC,CAAEC,kBAAiBF,qBChBtBO,GAAkB,KAClBC,GAAiB,MACjBC,GAAmB,QACnBC,GAAkB,SAgDTC,GAzCQ,SAACC,GACtB,IAAIC,EAAQzT,KAAK0T,IAAIF,GACfG,EAAW,CACfC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTR,QAAS,GA8BX,OA3BIC,GAASH,KACXK,EAASC,MAAQ5T,KAAK8K,MAAM2I,EAAQH,IACpCG,GAASE,EAASC,MAAQN,IAGxBG,GAASJ,KACXM,EAASE,OAAS7T,KAAK8K,MAAM2I,EAAQJ,IACrCI,GAASE,EAASE,OAASR,IAGzBI,GAASL,KACXO,EAASG,KAAO9T,KAAK8K,MAAM2I,EAAQL,IACnCK,GAASE,EAASG,KAAOV,IAGvBK,GAASN,KACXQ,EAASI,MAAQ/T,KAAK8K,MAAM2I,EAAQN,IACpCM,GAASE,EAASI,MAAQZ,IAGxBM,GA1CoB,KA2CtBE,EAASK,QAAUhU,KAAK8K,MAAM2I,EA3CR,IA4CtBA,GA5CsB,GA4CbE,EAASK,SAGpBL,EAASH,QAAUC,EAEZE,GCnCMM,GAVoD,SAAC,GAA0B,IAAxBrB,EAAuB,EAAvBA,iBAAuB,EAC1DW,GAAeX,GAAxCkB,EADmF,EACnFA,KAAMC,EAD6E,EAC7EA,MAAOC,EADsE,EACtEA,QAErB,OACE,eAAC,IAAD,CAAMtX,SAAS,OAAf,UACGoX,GAAQA,EADX,OACqBC,GAASA,EAD9B,OACyCC,GAAWA,EADpD,QC8CWE,GAzC2D,SAAC,GAKpE,IAAD,IAJJpS,eAII,SAHJsP,EAGI,EAHJA,cACArC,EAEI,EAFJA,kBAEI,IADJsC,2BACI,MADkB,SAClB,EACItT,EAAMC,cAAND,EACFoW,EAAeC,SAAShD,GAAiB,KAAO,IAFlD,EAG2C/R,aAC7C,qCACE,cAAC,IAAD,CAAMtC,MAAI,EAACyB,GAAG,MAAd,SACGT,EAAE,wBAAyB,CAAEW,IAAKyV,MAErC,cAAC,IAAD,UACGpW,EACC,sJAIN,CAAEuB,UAAW,iBAXPC,EAHJ,EAGIA,UAAWC,EAHf,EAGeA,QAASC,EAHxB,EAGwBA,eAHxB,EAiB0CkT,GAC5CyB,SAASrF,EAAmB,IAC5BqF,SAAS/C,EAAqB,KAFxBuB,EAjBJ,EAiBIA,iBAAkBE,EAjBtB,EAiBsBA,gBAKpBuB,EAAkBvS,GAAWiN,GAAqB+D,EAExD,OACE,eAAC,IAAD,CAAMtS,WAAW,SAAS3B,eAAe,gBAAzC,UACGY,GAAkBD,EACnB,eAAC,IAAD,CAAaiB,IAAKlB,EAAWgE,OAAK,EAAlC,UACG6Q,SAAShD,GAAiB,KAAO,IADpC,IAC0C,IACrBrT,EAAlBsW,EAAoB,sBAA2B,4CAEjDA,GAAmB,cAAC,GAAD,CAAoBzB,iBAAkBA,QCEjD0B,GAtC+B,SAAC,GAAuE,IAArE7P,EAAoE,EAApEA,mBAAoBsK,EAAgD,EAAhDA,kBAAmBwF,EAA6B,EAA7BA,UAAW/K,EAAkB,EAAlBA,YACzFzL,EAAMC,cAAND,EACFoW,EAAeC,SAASG,EAAUnD,eAAiB,IACnDoD,GAAapY,WAAWoN,IAAgB2K,EAAe,MAAM9X,QAAQ,GAHwC,EAIpEgD,aAC7C,qCACE,cAAC,IAAD,CAAMtC,MAAI,EAACyB,GAAG,MAAd,SACGT,EAAE,wBAAyB,CAAEW,IAAKyV,MAErC,cAAC,IAAD,UACGpW,EACC,sJAIN,CAAEuB,UAAW,cAXPC,EAJ2G,EAI3GA,UAAWC,EAJgG,EAIhGA,QAASC,EAJuF,EAIvFA,eAc5B,OACE,qCACE,eAAC,IAAD,CAAMb,GAAG,OAAO4B,WAAW,SAAS3B,eAAe,gBAAnD,UACGY,GAAkBD,EACnB,cAAC,IAAD,CAAaiB,IAAKlB,EAAWgE,OAAK,EAAlC,SACGxF,EAAE,mBAEL,eAAC,IAAD,CAAMrB,SAAS,OAAf,UACG8M,EAAcgL,EAAY,IAD7B,IACmC/P,QAGrC,cAAC,GAAD,CACE2M,cAAemD,EAAUnD,cACzBC,oBAAqBkD,EAAUlD,oBAC/BtC,kBAAmBA,QCfrB5G,GAAevO,YAAOwO,IAAPxO,CAAH,+CAwMH6a,GApMyC,SAAC,GAWlD,IAVLzV,EAUI,EAVJA,KACA0J,EASI,EATJA,WACA/N,EAQI,EARJA,kBACA8V,EAOI,EAPJA,kBACA3O,EAMI,EANJA,QACAmN,EAKI,EALJA,SAKI,IAJJtG,uBAII,SAHJ4L,EAGI,EAHJA,UACA5W,EAEI,EAFJA,UACAsU,EACI,EADJA,eAEQ/S,EAAiBF,EAAjBE,aACFwP,EAAoBC,eAClB5Q,EAAMC,cAAND,EACA/D,EAAUgN,eAAVhN,MAJJ,EAKiCmM,eAA7BC,EALJ,EAKIA,aAAcC,EALlB,EAKkBA,WALlB,EAM8BtN,oBAAS,GANvC,mBAMGuQ,EANH,KAMcC,EANd,OAOkCxQ,mBAAS,IAP3C,mBAOGyQ,EAPH,KAOgBC,EAPhB,OAQ0B1Q,mBAAS,GARnC,mBAQG2Q,EARH,KAQYC,EARZ,KASImJ,EAAoBH,GAAsByB,SAASnF,EAASF,oBAA5D+D,gBACFlJ,EAAiBJ,GAAeK,YAAa,IAAI7O,IAAUwO,GAAavO,MAAMN,GAAmBY,YAUjGuO,EAAsB,SAACC,GAC3B,IAAMC,EAAyBtB,EAAWuB,UAAU,KAAKC,aAAaH,GAChEI,EAAgBC,YAAsBJ,EAAwB9K,EAAatC,SAAUsC,EAAatC,UACxG6M,EAAeU,GACfR,EAAWI,IAGP2K,EAAgB,yCAAG,WAAOC,GAAP,oBAAA7O,EAAA,sDACvByD,GAAa,GACPqL,EAAuB7E,GAAoB4E,EAAsBlE,GAEjEoE,EAA8B,IAAI7Z,IAAU,KAC5C8Z,EAAkB7F,EAASL,OAAOmG,MAAMH,EAAqBzE,mBAC1C2E,EAAgBE,IAAIH,GAG3CnG,EAAkBS,QACf8F,cACAzC,KAAK,CAAEC,KAAM3Q,IACb4Q,GAAG,WAAW,WACbnJ,GAAa,MAEdmJ,GAAG,WAAW,WACbtM,EAAarI,EAAE,aAAcA,EAAE,0DAC/BwL,GAAa,GACb5L,IACAsU,OAEDS,GAAG,SAAS,SAACrZ,GACZkN,QAAQlN,MAAMA,GAEdgN,EAAWtI,EAAE,SAAUA,EAAE,GAAD,OAAI1E,EAAMmN,QAAV,0BACxB+C,GAAa,MAGjBmF,EAAkBS,QACf+F,SAASN,EAAqBzE,kBAAkBgF,YAGhD3C,KAAK,CAAEC,KAAM3Q,IACb4Q,GAAG,WAAW,WACbnJ,GAAa,MAEdmJ,GAAG,WAAW,WACbtM,EAAarI,EAAE,aAAcA,EAAE,0DAC/BwL,GAAa,GACb5L,IACAsU,OAEDS,GAAG,SAAS,SAACrZ,GACZkN,QAAQlN,MAAMA,GAEdgN,EAAWtI,EAAE,SAAUA,EAAE,GAAD,OAAI1E,EAAMmN,QAAV,0BACxB+C,GAAa,MA9CI,2CAAH,sDAmDhB6L,EAAa,yCAAG,WAAOT,GAAP,UAAA7O,EAAA,sDACpB4I,EAAkBS,QACfkG,QAAQV,EAAqBQ,YAG7B3C,KAAK,CAAEC,KAAM3Q,IACb4Q,GAAG,WAAW,WACbnJ,GAAa,MAEdmJ,GAAG,WAAW,WACbtM,EAAarI,EAAE,WAAYA,EAAE,4CAC7BwL,GAAa,GACb5L,IACAsU,OAEDS,GAAG,SAAS,SAACrZ,GACZkN,QAAQlN,MAAMA,GAEdgN,EAAWtI,EAAE,SAAUA,EAAE,GAAD,OAAI1E,EAAMmN,QAAV,0BACxB+C,GAAa,MAnBG,2CAAH,sDAuBbc,EAAkB,yCAAG,6BAAAvE,EAAA,sDACnB6O,EAAuB/J,YAAiB,IAAI5P,IAAUwO,GAActK,EAAatC,UACvF2M,GAAa,GAETZ,EACF+L,EAAiBC,GAGjBS,EAAcT,GARS,2CAAH,qDAYxB,OACE,eAAC,IAAD,CACErW,MAAyBP,EAAlB4K,EAAoB,UAAe,iBAC1ChL,UAAWA,EACXsJ,iBAAkBjN,EAAME,OAAOC,UAAU+M,WAH3C,UAKE,eAAC,IAAD,CAAM1G,WAAW,SAAS3B,eAAe,gBAAgBL,GAAG,MAA5D,UACE,eAAC,IAAD,CAAMzB,MAAI,EAAV,UAA8BgB,EAAlB4K,EAAoB,UAAe,SAA/C,OACA,eAAC,IAAD,CAAMnI,WAAW,SAAS8J,SAAS,OAAnC,UACE,cAAC,IAAD,CAAOzF,IAAG,yBAAoB3F,EAAaoB,OAAjC,QAA+CI,MAAO,GAAIC,OAAQ,GAAImE,IAAK5F,EAAaoB,SAClG,cAAC,IAAD,CAAMkD,GAAG,MAAMzG,MAAI,EAAnB,SACGmC,EAAaoB,eAIpB,cAAC,IAAD,CACEhH,MAAOkQ,EACPe,SAtHyB,SAACC,GAC9B,IAAMC,EAAaD,EAAME,OAAOpR,OAAS,IACnCqR,EAAiB,IAAI3P,IAAUyP,GAAYP,aAAa,IAAIlP,IAAU,IAAIsa,IAAIpW,EAAatC,WAC3FiO,EAAa7K,KAAK8K,MAAMH,EAAeV,UAAUvB,GAAYwB,aAAa,KAAK3O,YACrFkO,EAAegB,GACfd,EAAWkB,EAAa,IAAM,IAAMA,IAkHhCG,cAAa,WAAMpB,GAAkB,EAAxB,UAEf,eAAC,IAAD,CAAMhL,GAAG,MAAM4E,GAAG,OAAO7G,MAAM,aAAaD,SAAS,OAAO8B,GAAG,MAA/D,sBACY4L,YAAsB1B,EAAYxJ,EAAatC,aAE3D,cAAC,IAAD,CACEmO,IAAK,EACL5H,IAAK,IACL7J,MAAOoQ,EACPuB,eAAgBnB,EAChBoB,KAAK,QACLC,WAAU,UAAKzB,EAAL,KACV0B,KAAM,IAER,eAAC,IAAD,CAAM5K,WAAW,SAAS3B,eAAe,gBAAgBD,GAAG,MAA5D,UACE,cAAC,GAAD,CAAcmC,MAAM,KAAKuH,GAAG,MAAMC,EAAE,WAAWzH,QAAQ,WAAWD,QAAS,kBAAMiJ,EAAoB,KAArG,iBAGA,cAAC,GAAD,CAAc/I,MAAM,KAAKuH,GAAG,MAAMC,EAAE,WAAWzH,QAAQ,WAAWD,QAAS,kBAAMiJ,EAAoB,KAArG,iBAGA,cAAC,GAAD,CAAc/I,MAAM,KAAKuH,GAAG,MAAMC,EAAE,WAAWzH,QAAQ,WAAWD,QAAS,kBAAMiJ,EAAoB,KAArG,iBAGA,cAAC,GAAD,CAAc/I,MAAM,KAAKuH,GAAG,MAAMC,EAAE,WAAWzH,QAAQ,WAAWD,QAAS,kBAAMiJ,EAAoB,MAArG,oBAIDnB,GAAmBmK,GAClB,cAAC,GAAD,CACErO,mBAAoBvF,EAAaoB,OACjCyO,kBAAmBE,EAASF,kBAC5BwF,UAAWA,EACX/K,YAAaA,IAGjB,cAAC,IAAD,CACExE,UAAWsE,EACX7C,QAAS6C,EAAY,cAAC,IAAD,CAAe5C,MAAI,EAAC/J,MAAM,iBAAoB,KACnEkE,QAASwJ,EACT1D,UAAW6C,GAA2C,IAA5BpN,WAAWoN,GACrC5K,GAAG,OALL,SAOeb,EAAZuL,EAAc,aAAkB,cAEjCX,GACA,eAAC,IAAD,CAAQ/J,GAAG,MAAMwI,GAAG,IAAIC,UAAQ,EAACvI,KAAMqB,IAAmBW,QAAQ,YAAlE,UACG/C,EAAE,OADL,IACcmB,EAAaoB,cCzIpBiV,GAhEyC,SAAC,GASlD,IARLvW,EAQI,EARJA,KACAsM,EAOI,EAPJA,oBACA3Q,EAMI,EANJA,kBACAsU,EAKI,EALJA,SACAwB,EAII,EAJJA,kBACA3O,EAGI,EAHJA,QACAyS,EAEI,EAFJA,UACAtC,EACI,EADJA,eAEQ/S,EAAiBF,EAAjBE,aADJ,EAE8CqQ,GAAoBN,EAASL,OAAQ6B,GAA/EZ,EAFJ,EAEIA,gBAAiBC,EAFrB,EAEqBA,qBAEnB0F,EAAoB3L,YACxB/J,YAAiB+P,EAAgB3F,aAAavP,GAAoBuE,EAAatC,WAL7E,EAQ6ByD,YAAS,cAAC,GAAD,CAAsB0G,YAAa7H,EAAaoB,UAAnFwL,EARH,sBAUqBzL,YACvB,cAAC,GAAD,CACEyB,QAASA,EACT4G,WAAY4C,EACZtM,KAAMA,EACNiQ,SAAUA,EACVtU,kBAAmBA,EACnBsX,eAAgBA,KAPblG,EAVH,sBAqBuB1L,YACzB,cAAC,GAAD,CACEyB,QAASA,EACT4G,WAAYmH,EACZ7Q,KAAMA,EACNrE,kBAAmBA,EACnB8V,kBAAmBA,EACnBxB,SAAUA,EACVsF,UAAWA,EACXtC,eAAgBA,EAChBtJ,iBAAe,KAVZqD,EArBH,oBAmCJ,OACE,eAAC,IAAD,CAAMnN,eAAe,gBAAgB2B,WAAW,SAAhD,UACE,eAAC,IAAD,CAAM8C,cAAc,SAApB,UACE,cAAC,IAAD,UAAUwM,IACV,cAAC,IAAD,CAAMpT,SAAS,OAAOC,MAAM,aAA5B,oBACEhC,EAAoB6a,EAAoB,cAAC,IAAD,CAAU5W,GAAG,MAAM+B,OAAQ,GAAID,MAAO,KADhF,aAIF,eAAC,IAAD,WACE,cAAC,IAAD,CAAYI,QAAQ,YAAYD,QAASmL,EAAkBvK,GAAG,MAA9D,SACE,cAAC,IAAD,CAAW9E,MAAM,UAAU+D,MAAM,WAEnC,cAAC,IAAD,CAAYI,QAAQ,YAAYD,QAASyK,EAAoBW,GAAG,GAAKF,EAAiBD,EAAtF,SACE,cAAC,IAAD,CAASnP,MAAM,UAAU+D,MAAM,OAAOC,OAAO,kBCTxC8U,GA9C6C,SAAC,GAWtD,IAVLzW,EAUI,EAVJA,KACAsM,EASI,EATJA,oBACA3Q,EAQI,EARJA,kBACAsU,EAOI,EAPJA,SACAyG,EAMI,EANJA,uBACAjF,EAKI,EALJA,kBAKI,IAJJzL,iBAII,SAHJlD,EAGI,EAHJA,QACAyS,EAEI,EAFJA,UACAtC,EACI,EADJA,eAEQ/S,EAAiBF,EAAjBE,aACAnB,EAAMC,cAAND,EAFJ,EAG6BsC,YAAS,cAAC,GAAD,CAAsB0G,YAAa7H,EAAaoB,UAAnFwL,EAHH,sBAIqBzL,YACvB,cAAC,GAAD,CACEyB,QAASA,EACT4G,WAAY4C,EACZ3Q,kBAAmBA,EACnBsU,SAAUA,EACVjQ,KAAMA,EACNiT,eAAgBA,KAPblG,EAJH,oBAgCJ,OAAO,cAAC,IAAD,CAAMzI,cAAc,SAApB,SAA8B0B,EAAY,cAAC,IAAD,CAAUtE,MAAM,OAAOC,OAAO,SAhBtE+U,EACL,cAAC,GAAD,CACE1W,KAAMA,EACNsM,oBAAqBA,EACrB3Q,kBAAmBA,EACnBsU,SAAUA,EACVwB,kBAAmBA,EACnB3O,QAASA,EACTmQ,eAAgBA,EAChBsC,UAAWA,IAGb,cAAC,IAAD,CAAQ1T,QAASyK,EAAoBW,GAAG,GAAKF,EAAiBD,EAA9D,SAAuF/N,EAAE,cCnDzFqP,GAAaxT,YAAOyT,IAAPzT,CAAH,kDA0FD+b,GA3EV,SAAC,GAWC,IAVL3W,EAUI,EAVJA,KACAiQ,EASI,EATJA,SACAwB,EAQI,EARJA,kBACA9V,EAOI,EAPJA,kBACA+a,EAMI,EANJA,uBACA5T,EAKI,EALJA,QACA2M,EAII,EAJJA,YACA8F,EAGI,EAHJA,UACAvP,EAEI,EAFJA,UACAiN,EACI,EADJA,eAEQ/S,EAA2BF,EAA3BE,aAAcwO,EAAa1O,EAAb0O,SADlB,EAE0C3U,oBAAS,GAFnD,mBAEG6c,EAFH,KAEoBC,EAFpB,KAGE3D,EAAeC,eACfzD,EAAoBC,eAClB5Q,EAAMC,cAAND,EACFuN,EAAsB,IAAItQ,KAAkB,OAAR0S,QAAQ,IAARA,OAAA,EAAAA,EAAUpC,sBAAuB,GAgB3E,OAdA9R,qBAAU,YACiB,yCAAG,+BAAAsM,EAAA,+EAEDoM,EAAa/C,QAAQtB,UAAU/L,EAAS4M,EAAkB0D,QAAQxS,SAASwP,OAF1E,OAElB0G,EAFkB,OAGlBC,EAAmB,IAAI/a,IAAU8a,GACvCD,EAAmBE,EAAiB9J,GAAG,IAJf,gDAMxB4J,GAAmB,GANK,yDAAH,qDAUzBG,KACC,CAAClU,EAASoQ,EAAcxD,EAAmBD,IAG5C,cAAC,IAAD,CAAMnL,cAAc,SAApB,SACE,eAAC,IAAD,CAAMA,cAAc,SAApB,UACE,eAAC,IAAD,CAAK0K,QAAQ,SAAb,UACE,eAAC,GAAD,CACErR,MAAO+Y,EAAyB,YAAc,aAC9CnX,cAAc,YACdxB,MAAI,EACJL,SAAS,OAJX,UAMGgZ,EAAyBxW,EAAaoB,OAASvC,EAAE,SAAU,OAE9D,cAAC,GAAD,CACEpB,MAAO+Y,EAAyB,aAAe,YAC/CnX,cAAc,YACdxB,MAAI,EACJL,SAAS,OAJX,SAMGgZ,EAAyB3X,EAAE,wBAAL,UAAkCmB,EAAaoB,aAGzEsV,EACC,cAAC,GAAD,CACE5Q,UAAWA,EACXhG,KAAMA,EACNsM,oBAAqBA,EACrB3Q,kBAAmBA,EACnB4Z,UAAWA,EACXtF,SAAUA,EACVwB,kBAAmBA,EACnBiF,uBAAwBA,EACxB5T,QAASA,EACTmQ,eAAgBA,IAGlB,cAACgE,GAAD,CAAqBjX,KAAMA,EAAM8C,QAASA,EAASkD,UAAWA,EAAWiN,eAAgBA,UC1E7FiE,GAAiBtc,YAAOuc,IAAPvc,CAAH,kDACJ,qBAAGoL,UAA6B,IAAM,WA0EvCoR,GAvEqD,SAAC,GAAuB,IAArBpX,EAAoB,EAApBA,KAAM8C,EAAc,EAAdA,QACnE/D,EAAMC,cAAND,EADiF,EAEjDsY,eAAhC5H,EAFiF,EAEjFA,YAAawD,EAFoE,EAEpEA,eACfhD,EAAWT,GAAoBC,GAC/B8F,EAAYrD,KAJuE,EAKzCb,KAAxCtO,EALiF,EAKjFA,iBAAkB0O,EAL+D,EAK/DA,kBAClBvR,EAAiBF,EAAjBE,aAGFwW,EAAyBzG,EAASL,QAAUK,EAASL,OAAO3C,GAAG,GAC/DtR,EAAoBgF,YAAeT,EAAaU,QAAUC,YAAWX,EAAaU,SAAW,IAC7FoF,GAAahG,EAAK0O,WAAauB,EAASL,OACxC0H,EAA0B/B,EAAUzY,gBAAkBsY,SAASG,EAAUzY,eAAgB,IAAM,IAErG,OACE,eAAC,GAAD,CAAYqF,UAAWuU,EAAwBa,MAAO,CACpD9X,SAAU,SADZ,UAGE,cAAC,GAAD,CAAkBX,mBAAmB,aAAa2G,mBAAmB,YACrE,eAACyR,GAAD,CAAgBlR,UAAWA,EAA3B,UACE,cAACwR,GAAD,CACExX,KAAMA,EACNrE,kBAAmBA,EACnBkB,kBAfqB,IAgBrBC,eAAgBwa,IAElB,cAAC,GAAD,CAAuBtX,KAAMA,EAAMrE,kBAAmBA,IACtD,uBACA,uBACA,cAAC,IAAD,CAAMkE,eAAe,SAArB,wCACA,cAAC,IAAD,CAAMA,eAAe,SAArB,iBACA,cAAC,IAAD,CAAMA,eAAe,SAArB,iBACA,cAAC,IAAD,CAAMA,eAAe,SAArB,iBACA,cAAC,IAAD,CAAMA,eAAe,SAArB,iBACA,cAAC,IAAD,CAAMA,eAAe,SAArB,iBACA,cAAC,IAAD,CAAMA,eAAe,SAArB,iBACA,cAAC,IAAD,CAAMA,eAAe,SAArB,iBACA,cAAC,IAAD,CAAMD,GAAG,OAAO0E,cAAc,SAA9B,SACGxB,EACC,cAAC2U,GAAD,CACEzX,KAAMA,EACNiQ,SAAUA,EACVwB,kBAAmBA,EACnB8D,UAAWA,EACX5Z,kBAAmBA,EACnB+a,uBAAwBA,EACxB5T,QAASA,EACT2M,YAAaA,EACbwD,eAAgBA,EAChBjN,UAAWA,IAGb,qCACE,cAAC,IAAD,CAAMxG,GAAG,OAAOD,cAAc,YAAY7B,SAAS,OAAOC,MAAM,aAAaI,MAAI,EAAjF,SACGgB,EAAE,mBAEL,cAACuQ,EAAA,EAAD,YAKR,cAAC,GAAD,CACEtP,KAAMA,EACN8C,QAASA,EACThG,eAAgByY,EAAUzY,eAC1BiG,iBAAkBA,Q,UC1EpB2U,GAAa9c,YAAOyT,IAAPzT,CAAH,qFAGZ,qBAAGI,MAAkBoH,aAAauV,MAKhC/P,GAAahN,YAAOgd,IAAPhd,CAAH,8CA4CDid,GAxCQ,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,WAAYC,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,wBAA8B,EACxDC,cAAjBC,EADyE,EACzEA,IAAKC,EADoE,EACpEA,QACLpZ,EAAMC,cAAND,EAER,OACE,eAAC,IAAD,CAAMyC,WAAW,SAAS3B,eAAe,SAASL,GAAG,OAArD,UACE,eAAC,IAAD,CAAMgC,WAAW,SAAS8C,cAAe,CAAC,SAAU,KAAM,MAAO,MAAjE,UACE,eAAC,IAAD,CAAYsJ,YAAauK,EAAU,EAAI,EAAGpW,MAAM,KAAhD,UACE,cAAC,IAAD,CAAgBqG,GAAIP,KAAMuQ,GAAE,UAAKF,GAAjC,SACE,cAACR,GAAD,CAAY/Z,MAAM,YAAYI,MAAI,EAACL,SAAS,OAA5C,SACGqB,EAAE,YAGP,cAAC,IAAD,CAAiBsZ,KAAML,EAAvB,SACE,cAAC,IAAD,CAAgB5P,GAAIP,KAAMuQ,GAAE,UAAKF,EAAL,YAA5B,SACE,cAACR,GAAD,CAAY/Z,MAAM,YAAYI,MAAI,EAACL,SAAS,OAA5C,SACGqB,EAAE,qBAKX,eAAC,IAAD,CAAMa,GAAI,CAAC,MAAO,KAAM,EAAG,MAAO4E,GAAI,CAAC,EAAG,KAAM,OAAQ,MAAO3E,eAAe,SAAS2B,WAAW,SAAlG,UACE,cAAC,IAAD,CAAQO,MAAM,KAAKuW,QAASR,EAAYvM,SAAU,kBAAMwM,GAAc,SAACQ,GAAD,OAAWA,QACjF,cAAC,IAAD,CAAM/T,GAAG,MAAT,SAAgBzF,EAAE,uBAGtB,cAAC,IAAD,CAAMyF,GAAG,OAAOhD,WAAW,SAAS3B,eAAe,WAAnD,SACE,cAAC,GAAD,CAAYwI,UAAQ,EAACvI,KAAK,yCAA1B,SACE,eAAC,IAAD,CAAQ0Y,GAAI,CAAC,OAAQ,KAAM,KAAM,KAAM,QAAvC,UACE,cAACd,GAAD,CAAY/Z,MAAM,YAAYI,MAAI,EAACL,SAAS,OAA5C,SACGqB,EAAE,UAEL,cAAC,IAAD,CAAUpB,MAAM,YAAY6G,GAAI,CAAC,KAAM,KAAM,KAAM,EAAG,oB,UChBnDiU,GApCe,SAACC,GAC7B,IAAMhJ,EAAoBC,eADwB,EAEgB5V,mBAAS,MAFzB,mBAE3C4e,EAF2C,KAEhBC,EAFgB,OAGY7e,mBAAS,MAHrB,mBAG3C8e,EAH2C,KAGlBC,EAHkB,OAIY/e,mBAAS,MAJrB,mBAI3Cgf,EAJ2C,KAIhBC,EAJgB,OAKQjf,mBAAS,MALjB,mBAK3Ckf,EAL2C,KAKlBC,EALkB,KAO5CC,EAAYxY,YAAeyY,eA0BjC,OAxBA5e,qBAAU,YAEU,yCAAG,mCAAAsM,EAAA,sEACkC6K,aAAiB,CACpEjC,EAAkBS,QAAQkJ,8BAA8BjJ,KACxDV,EAAkBS,QAAQmJ,mCAAmClJ,OAH5C,mCACZmJ,EADY,KACMC,EADN,KAKnBZ,EAA6B,IAAI5c,IAAUud,IAC3CT,EAA2B,IAAI9c,IAAUwd,IANtB,2CAAH,qDAQlBC,KACC,CAAC/J,EAAmBgJ,IAEvBle,qBAAU,WAER,GAAIme,GAA6BQ,EAAW,CAC1C,IAAMO,EAAsBf,EAA0BzN,aAAaiO,GAC7DQ,EAAmBvO,YAAsBsO,EAAqB,GAAI,GAClEE,EAAgBxO,YAAsBuN,EAA2B,GAAI,GAC3EK,EAAyBW,GACzBT,EAAuBU,MAExB,CAACT,EAAWR,IAER,CAAEA,4BAA2BI,4BAA2BE,0BAAyBJ,4BCrBpFgB,GAAUjf,IAAOC,IAAV,8GACS,qBAAGG,MAAkBE,OAAO4e,sBAkGnCC,GA5FiC,SAAC,GAO1C,IANLd,EAMI,EANJA,wBACAF,EAKI,EALJA,0BACAF,EAII,EAJJA,wBACA1G,EAGI,EAHJA,QACAxT,EAEI,EAFJA,UACAqb,EACI,EADJA,iBAEQjb,EAAMC,cAAND,EACA+D,EAAY4D,cAAZ5D,QACA9H,EAAUgN,eAAVhN,MAHJ,EAIiCmM,eAA7BE,EAJJ,EAIIA,WAAYD,EAJhB,EAIgBA,aACdsI,EAAoBC,eALtB,EAM8B5V,oBAAS,GANvC,mBAMGuQ,EANH,KAMcC,EANd,KAOE0P,EAAmB9H,EAAU,IAC7B+H,EAAsB9O,YAAsByN,EAAyB,GAAI,GAR3E,EAS2CxY,aAAW,cAAC2Z,EAAD,IAAsB,CAC9E1Z,UAAW,SACX6Z,eAAgB,CAAEC,MAAO,MAFnB7Z,EATJ,EASIA,UAAWC,EATf,EASeA,QAASC,EATxB,EASwBA,eAKtB4K,EAAkB,yCAAG,uBAAAvE,EAAA,sDACzB4I,EAAkBS,QACf3B,UACAgF,KAAK,CAAEC,KAAM3Q,IACb4Q,GAAG,WAAW,WACbnJ,GAAa,MAEdmJ,GAAG,WAAW,WACbtM,EAAarI,EAAE,qBAAsBA,EAAE,8CACvCwL,GAAa,GACb5L,OAED+U,GAAG,SAAS,SAACrZ,GACZkN,QAAQlN,MAAMA,GACdgN,EACEtI,EAAE,0BACFA,EAAE,2FAEJwL,GAAa,MAlBQ,2CAAH,qDAsBxB,OACE,eAAC,IAAD,CAAOjL,MAAOP,EAAE,gBAAiBJ,UAAWA,EAAWsJ,iBAAkBjN,EAAME,OAAOC,UAAU+M,WAAhG,UACGzH,GAAkBD,EACnB,eAAC,IAAD,CAAMgB,WAAW,aAAa3B,eAAe,gBAA7C,UACE,cAAC,IAAD,UAAOd,EAAE,kBACT,eAAC,IAAD,CAAMuF,cAAc,SAApB,UACE,eAAC,IAAD,CAAMvG,MAAI,EAAV,UAAYkb,EAAZ,WACA,eAAC,IAAD,CAAMvb,SAAS,OAAOC,MAAM,aAA5B,eACKob,EADL,gBAKJ,cAACc,GAAD,IACA,eAAC,IAAD,CAAMrY,WAAW,SAAS3B,eAAe,gBAAzC,UACE,cAAC,IAAD,CAAMnC,SAAS,OAAOC,MAAM,aAA5B,SACGoB,EAAE,8BAEL,eAAC,IAAD,CAAMrB,SAAS,OAAOC,MAAM,aAA5B,UACGuc,EADH,cAIF,eAAC,IAAD,CAAM1Y,WAAW,SAAS3B,eAAe,gBAAgBL,GAAG,OAA5D,UACE,cAAC,IAAD,CAAM9B,SAAS,OAAOC,MAAM,aAA5B,SACGoB,EAAE,YAEL,eAAC,IAAD,CAAMrB,SAAS,OAAOC,MAAM,aAA5B,UACGsc,EADH,UAIF,cAAC,IAAD,CACEjU,UAAWsE,EACX7C,QAAS6C,EAAY,cAAC,IAAD,CAAe5C,MAAI,EAAC/J,MAAM,iBAAoB,KACnEkE,QAASwJ,EACT7L,GAAG,OAJL,SAMGT,EAAE,aAEL,eAAC,IAAD,CAAMc,eAAe,SAAS2B,WAAW,SAAzC,UACE,cAAC,IAAD,CAAM9D,SAAS,OAAOK,MAAI,EAACJ,MAAM,aAAa8E,GAAG,MAAjD,SACG1D,EAAE,kBAEL,sBAAM0C,IAAKlB,EAAX,SACE,cAAC,IAAD,CAAU5C,MAAM,wBC3FpBqE,GAAapH,YAAOqH,IAAPrH,CAAH,mFAEZ,qBAAGI,MAAkBoH,aAAaC,MAKhC+L,GAAaxT,YAAOyT,IAAPzT,CAAH,kDA2EDyf,GAvEI,WAAO,IAChBtb,EAAMC,cAAND,EACAub,EAAgBC,eAAhBD,YAFe,EAGiE7B,GACtF6B,GADMvB,EAHe,EAGfA,0BAA2BE,EAHZ,EAGYA,wBAAyBJ,EAHrC,EAGqCA,wBAGtDmB,EAAmB,kBACvB,eAAC,IAAD,WACE,cAAC,IAAD,CAAKxa,GAAG,OAAR,mBAAmBT,EAAE,+EACrB,cAAC,IAAD,CAAKS,GAAG,OAAR,SACGT,EACC,yJAGJ,cAAC,IAAD,CAAKwY,MAAO,CAAEiD,WAAY,QAA1B,SACGzb,EAAE,+EAA2E,CAAEW,IAAKyS,EAAU,YAI7FA,EAAYD,KAAZC,QAnBe,EAoBQ9Q,YAC7B,cAAC,GAAD,CACE4X,wBAAyBA,EACzBF,0BAA2BA,EAC3BF,wBAAyBA,EACzB1G,QAASA,EACT6H,iBAAkBA,KANfS,EApBgB,sBA8BwBpa,aAAW,cAAC2Z,EAAD,IAAsB,CAC9E1Z,UAAW,aACXoN,cAAe,CAAC,GAAI,MAFdnN,EA9Be,EA8BfA,UAAWC,EA9BI,EA8BJA,QAASC,EA9BL,EA8BKA,eAK5B,OACE,qCACGA,GAAkBD,EACnB,cAAC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAM8D,cAAc,SAApB,SACE,eAAC,IAAD,CAAM9C,WAAW,SAAShC,GAAG,OAA7B,UACE,cAAC,IAAD,CAAM9B,SAAS,OAAOK,MAAI,EAACJ,MAAM,aAAa8E,GAAG,MAAjD,SACG1D,EAAE,sBAEL,cAAC,IAAD,CAAK0C,IAAKlB,EAAV,SACE,cAAC,IAAD,CAAU5C,MAAM,sBAItB,eAAC,IAAD,CAAM6D,WAAW,SAAS3B,eAAe,gBAAzC,UACE,eAAC,IAAD,CAAMyE,cAAc,SAAS7B,GAAG,OAAhC,UACE,cAAC,IAAD,UAAUwW,GAA2B,cAAC,IAAD,CAAUtX,OAAQ,GAAID,MAAO,GAAIlC,GAAG,UACzE,cAAC,GAAD,CAAY9B,SAAS,OAAOC,MAAM,aAAlC,SACGob,EAAyB,YAAQA,EAAR,QAA0C,cAAC,IAAD,CAAUpX,OAAQ,GAAID,MAAO,UAGrG,cAAC,IAAD,CACEiG,UAAWoR,IAA8BE,IAA4B9G,EACrEtQ,QAAS4Y,EACT1Y,MAAM,KAHR,SAKGhD,EAAE,uBCKF2b,UAjFS,WAAO,IACrBC,EAAS1C,cAAT0C,KACA5b,EAAMC,cAAND,EACA+D,EAAY4D,cAAZ5D,QACF8X,EAAQC,YAAS/X,GACfE,EAAiBC,cAAjBD,aALoB,EAMQpJ,GAAgB,EAAO,uBAN/B,mBAMrBke,EANqB,KAMTC,EANS,OAQO+C,mBACjC,kBAAMC,IAAUH,GAAO,SAAC5a,GAAD,OAAUA,EAAKI,YAAc4C,EAAehD,EAAKmD,cACxE,CAACH,EAAc4X,IAVW,mBAQrBI,EARqB,KAQNC,EARM,KAgBtBjD,GAJkB8C,mBACtB,kBAAMG,EAAUC,QAAO,SAAClb,GAAD,OAAUA,EAAK0O,UAAY,IAAI1S,IAAUgE,EAAK0O,SAASnC,eAAeI,cAAc,QAC3G,CAACsO,IAE6BH,mBAC9B,kBAAME,EAAcG,MAAK,SAACnb,GAAD,OAAUA,EAAK0O,UAAY,IAAI1S,IAAUgE,EAAK0O,SAASnC,eAAeI,cAAc,QAC7G,CAACqO,KAGGI,EAAeN,mBAAQ,kBAAMG,EAAUI,MAAK,SAACrb,GAAD,OAA0B,IAAhBA,EAAKiG,YAAe,CAACgV,IAEjF,OACE,qCACE,cAAC,EAAD,CAAYhgB,WAHQ,UAGpB,SACE,eAAC,IAAD,CAAM4E,eAAe,gBAAgByE,cAAe,CAAC,SAAU,KAAM,OAArE,UACE,eAAC,IAAD,CAAMA,cAAc,SAAS7B,GAAI,CAAC,MAAO,GAAzC,UACE,cAAC,IAAD,CAAS2F,GAAG,KAAKxC,KAAK,MAAMjI,MAAM,YAAY6B,GAAG,OAAjD,SACGT,EAAE,YAEL,cAAC,IAAD,CAAS6G,KAAK,KAAKjI,MAAM,OAAzB,SACGoB,EAAE,8BAEL,cAAC,IAAD,CAAS6G,KAAK,KAAKjI,MAAM,OAAzB,SACGoB,EAAE,oCAGP,cAAC,IAAD,CAAM4C,OAAO,cAAc9B,eAAe,SAAS2B,WAAW,SAAS5B,GAAI,CAAC,OAAQ,KAAM,KAA1F,SACE,cAAC,GAAD,WAIN,eAAC0b,EAAA,EAAD,WACE,cAAC,GAAD,CACExD,WAAYA,EACZC,cAAeA,EACfC,wBAAyBA,IAE3B,eAACpV,EAAD,WACE,cAAC,IAAD,CAAO2Y,OAAK,EAACZ,KAAI,UAAKA,GAAtB,SACE,mCACE,cAAC,GAAD,CAAgB3a,KAAMob,EAActY,QAASA,QAUjD,cAAC,IAAD,CAAO6X,KAAI,UAAKA,EAAL,YAAX,SACGa,IAAQR,EAAe,CAAC,cAAcS,KAAI,SAACzb,GAAD,OACzC,cAAC,GAAD,CAA4BA,KAAMA,EAAM8C,QAASA,GAAlC9C,EAAKiG,gBAI1B,cAAC,IAAD,CACEqD,GAAG,OACH1J,GAAG,OACHiG,IAAI,+BACJC,IAAI,iBACJpE,MAAO,IACPC,OAAQ,c,iCC5FlB,wOAsCawE,EAAW,SAACvF,GACvB,IAAM8a,EAAOC,cACb,OAAOb,mBAAQ,kBAAMc,YAAiBhb,EAAS8a,KAAO,CAAC9a,EAAS8a,KAWrDvI,EAAU,WACrB,IAAMuI,EAAOC,cACb,OAAOb,mBAAQ,kBAAMe,YAAgBH,KAAO,CAACA,KAkBlCI,EAAa,WACxB,IAAMJ,EAAOC,cACb,OAAOb,mBAAQ,kBAAMiB,YAAmBL,KAAO,CAACA,KAQrCjT,EAAgB,WAC3B,IAAMiT,EAAOC,cACb,OAAOb,mBAAQ,kBAAMkB,YAAsBN,KAAO,CAACA,KAGxC9U,EAAc,SAACqV,GAC1B,IAAMP,EAAOC,cACb,OAAOb,mBAAQ,kBAAMoB,YAAoBD,EAAIP,KAAO,CAACO,EAAIP,KA4B9C/L,EAAuB,WAClC,IAAM+L,EAAOC,cACb,OAAOb,mBAAQ,kBAAMqB,YAAqBT,KAAO,CAACA,M,2bCjHvC3U,EAAO,uCAAG,WAAOR,EAAYiC,EAAoB1F,GAAvC,SAAAgE,EAAA,+EACdP,EAAW4J,QACfpJ,QAAQyB,EAAmB4K,QAAQxS,QAASyS,IAAOC,UAAUC,YAC7DC,KAAK,CAAEC,KAAM3Q,KAHK,2CAAH,0DAMP8F,EAAK,uCAAG,WAAOJ,EAAoB4T,EAAKzT,EAAQ7F,GAAxC,SAAAgE,EAAA,yDACP,IAARsV,EADe,yCAEV5T,EAAmB2H,QACvBkM,aAAa,IAAIrgB,IAAU2M,GAAQ1M,MAAMqgB,KAAuBnG,YAChE3C,KAAK,CAAEC,KAAM3Q,EAASyZ,IAAK,MAC3B7I,GAAG,mBAAmB,SAAC1M,GACtB,OAAOA,EAAGwV,oBANG,gCAUZhU,EAAmB2H,QACvBkG,QAAQ+F,EAAK,IAAIpgB,IAAU2M,GAAQ1M,MAAMqgB,KAAuBnG,YAChE3C,KAAK,CAAEC,KAAM3Q,EAASyZ,IAAK,MAC3B7I,GAAG,mBAAmB,SAAC1M,GACtB,OAAOA,EAAGwV,oBAdK,2CAAH,4DAkBL1T,EAAS,uCAAG,WAAOnC,EAAkBgC,GAAzB,6BAAA7B,EAAA,6DAAiClJ,EAAjC,+BAA4C,GAAIkF,EAAhD,yCAChB6D,EAAiBwJ,QACrBkG,QAAQ,IAAIra,IAAU2M,GAAQ1M,MAAMwgB,IAAQnG,IAAI1Y,IAAWuY,YAC3D3C,KAAK,CAAEC,KAAM3Q,EAASyZ,IAAK,MAC3B7I,GAAG,mBAAmB,SAAC1M,GACtB,OAAOA,EAAGwV,oBALS,2CAAH,wDAST3T,EAAY,uCAAG,WAAOlC,EAAkBgC,EAAQ7F,GAAjC,SAAAgE,EAAA,+EACnBH,EAAiBwJ,QACrBkG,UACA7C,KAAK,CAAEC,KAAM3Q,EAASyZ,IAAK,IAAQjiB,MAAO,IAAI0B,IAAU2M,GAAQ1M,MAAMqgB,KAAuBnG,aAC7FzC,GAAG,mBAAmB,SAAC1M,GACtB,OAAOA,EAAGwV,oBALY,2CAAH,0DASZzS,EAAO,uCAAG,WAAOvB,EAAoB4T,EAAKzT,EAAQ7F,GAAxC,SAAAgE,EAAA,yDACT,IAARsV,EADiB,yCAEZ5T,EAAmB2H,QACvBuM,aAAa,IAAI1gB,IAAU2M,GAAQ1M,MAAMqgB,KAAuBnG,YAChE3C,KAAK,CAAEC,KAAM3Q,EAASyZ,IAAK,MAC3B7I,GAAG,mBAAmB,SAAC1M,GACtB,OAAOA,EAAGwV,oBANK,gCAUdhU,EAAmB2H,QACvB+F,SAASkG,EAAK,IAAIpgB,IAAU2M,GAAQ1M,MAAMqgB,KAAuBnG,YACjE3C,KAAK,CAAEC,KAAM3Q,EAASyZ,IAAK,MAC3B7I,GAAG,mBAAmB,SAAC1M,GACtB,OAAOA,EAAGwV,oBAdO,2CAAH,4DAkBPrS,EAAW,uCAAG,WAAOxD,EAAkBgC,GAAzB,6BAAA7B,EAAA,yDAAiClJ,EAAjC,+BAA4C,GAAIkF,EAAhD,uBAEgB,+CAArC6D,EAAiByM,QAAQxS,QAFJ,yCAGhB+F,EAAiBwJ,QACrBwM,oBACAnJ,KAAK,CAAEC,KAAM3Q,IACb4Q,GAAG,mBAAmB,SAAC1M,GACtB,OAAOA,EAAGwV,oBAPS,UAUgB,+CAArC7V,EAAiByM,QAAQxS,QAVJ,yCAWhB+F,EAAiBwJ,QACrBwM,oBACAnJ,KAAK,CAAEC,KAAM3Q,IACb4Q,GAAG,mBAAmB,SAAC1M,GACtB,OAAOA,EAAGwV,oBAfS,UAkBgB,+CAArC7V,EAAiByM,QAAQxS,QAlBJ,yCAmBhB+F,EAAiBwJ,QACrBwM,oBACAnJ,KAAK,CAAEC,KAAM3Q,IACb4Q,GAAG,mBAAmB,SAAC1M,GACtB,OAAOA,EAAGwV,oBAvBS,gCA2BlB7V,EAAiBwJ,QACrB+F,SAAS,IAAIla,IAAU2M,GAAQ1M,MAAMwgB,IAAQnG,IAAI1Y,IAAWuY,YAC5D3C,KAAK,CAAEC,KAAM3Q,EAASyZ,IAAK,MAC3B7I,GAAG,mBAAmB,SAAC1M,GACtB,OAAOA,EAAGwV,oBA/BW,2CAAH,wDAmCXtS,EAAoB,uCAAG,WAAOvD,EAAkBgC,EAAQ7F,GAAjC,SAAAgE,EAAA,+EAC3BH,EAAiBwJ,QACrBwM,oBACAnJ,KAAK,CAAEC,KAAM3Q,IACb4Q,GAAG,mBAAmB,SAAC1M,GACtB,OAAOA,EAAGwV,oBALoB,2CAAH,0DASpBhO,EAAO,uCAAG,WAAOhG,EAAoB4T,EAAKtZ,GAAhC,SAAAgE,EAAA,yDACT,IAARsV,EADiB,yCAEZ5T,EAAmB2H,QACvBuM,aAAa,KACblJ,KAAK,CAAEC,KAAM3Q,EAASyZ,IAAK,MAC3B7I,GAAG,mBAAmB,SAAC1M,GACtB,OAAOA,EAAGwV,oBANK,gCAUdhU,EAAmB2H,QACvBkG,QAAQ+F,EAAK,KACb5I,KAAK,CAAEC,KAAM3Q,EAASyZ,IAAK,MAC3B7I,GAAG,mBAAmB,SAAC1M,GACtB,OAAOA,EAAGwV,oBAdO,2CAAH,0DAkBPI,EAAY,uCAAG,WAAOjW,EAAkB7D,GAAzB,SAAAgE,EAAA,+EACnBH,EAAiBwJ,QACrBkG,QAAQ,KACR7C,KAAK,CAAEC,KAAM3Q,EAASyZ,IAAK,MAC3B7I,GAAG,mBAAmB,SAAC1M,GACtB,OAAOA,EAAGwV,oBALY,2CAAH,wDASZK,EAAe,uCAAG,WAAOlW,EAAkB7D,GAAzB,SAAAgE,EAAA,+EACtBH,EAAiBwJ,QACrBkG,UACA7C,KAAK,CAAEC,KAAM3Q,EAASyZ,IAAK,IAAQjiB,MAAOuV,MAC1C6D,GAAG,mBAAmB,SAAC1M,GACtB,OAAOA,EAAGwV,oBALe,2CAAH,yD,sFC/Gbb,IAfC,WAAO,IACbmB,EAAYpW,cAAZoW,QACFC,EAAS9e,iBAAO6e,GAFF,EAGI/iB,mBAAS+iB,EAAU,IAAIE,IAAKF,GAAWG,eAH3C,mBAGbvB,EAHa,KAGPwB,EAHO,KAYpB,OAPA1iB,qBAAU,WACJsiB,IAAYC,EAAO7e,UACrBgf,EAAQJ,EAAU,IAAIE,IAAKF,GAAWG,eACtCF,EAAO7e,QAAU4e,KAElB,CAACA,IAEGpB,I,qFCLMpM,IAZM,SAAC7T,GAAW,IACvBsD,EAAMC,cAAND,EADsB,EAEJoe,cAAlBC,EAFsB,EAEtBA,MAAOC,EAFe,EAEfA,OACPC,EAA0BC,aAAeH,EAAOC,GAAhDC,sBAER,OACE,cAAC,IAAD,yBAAQzb,QAASyb,GAA2B7hB,GAA5C,aACGsD,EAAE,sB,0LCSIye,EAAgB,SAACC,GAAwB,IAC5C3a,EAAY4D,cAAZ5D,QACF0F,EAAqBC,cAU3B,MAAO,CAAE6E,SARazG,sBAAW,sBAAC,4BAAAC,EAAA,6DAC1B4W,EAAkBD,EAASE,QAAO,SAACC,EAAOxB,GAC9C,MAAM,GAAN,mBAAWwB,GAAX,CAAkBpP,YAAQhG,EAAoB4T,EAAKtZ,OAClD,IAH6B,kBAKzB+a,QAAQC,IAAIJ,IALa,2CAM/B,CAAC5a,EAAS2a,EAAUjV,MAKZ+E,EAAiB,SAACtH,GAAgC,IAAxBsC,EAAuB,wDACtD/B,EAAWC,cAD2C,EAExCC,cAAZ5D,EAFoD,EAEpDA,QACF6D,EAAmBC,YAAYX,GAC/BuC,EAAqBC,cAErBsV,EAAgBlX,sBAAW,sBAAC,sBAAAC,EAAA,yDACjB,IAAXb,EAD4B,gCAExBuI,YAAQhG,EAAoB,EAAG1F,GAFP,kCAGrByF,EAHqB,iCAIxBsU,YAAgBlW,EAAkB7D,GAJV,gDAMxB8Z,YAAajW,EAAkB7D,GANP,QAQhC0D,EAAS4D,YAAwBnE,EAAQnD,IACzC0D,EAASwC,YAAkB/C,EAAQnD,IATH,4CAU/B,CAACA,EAAS0D,EAAU+B,EAAYC,EAAoB7B,EAAkBV,IAEzE,MAAO,CAAEqH,SAAUyQ,K,oDCrCNC,EAVU,SAAC1jB,GACxB,IAAMmH,EAAMxD,mBAMZ,OAJAzD,qBAAU,WACRiH,EAAIvD,QAAU5D,KAGTmH,EAAIvD,SCIEmZ,IAXQ,WAAO,IAAD,EACgBtd,mBAASka,KAAKC,OAD9B,mBACpBzE,EADoB,KACPwO,EADO,KAQ3B,MAAO,CAAExO,cAAayO,oBANMF,EAAiBvO,GAMFwD,eAJpB,WACrBgL,EAAoBhK,KAAKC","file":"static/js/7.3a0db716.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, localStorageKey: string) => {\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? JSON.parse(valueFromLS) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(value))\n  }, [value, localStorageKey])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@rug-zombie-libs/uikit'\nimport Container from '../layout/Container'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import BigNumber from 'bignumber.js'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK } from 'config'\n\n/**\n * Get the APR value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\n * @returns Null if the APR is NaN or infinite.\n */\nexport const getPoolApr = (\n  stakingTokenPrice: number,\n  rewardTokenPrice: number,\n  totalStaked: number,\n  tokenPerBlock: number,\n): number => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\n/**\n * Get farm APR value in %\n * @param poolWeight allocationPoint / totalAllocationPoint\n * @param cakePriceUsd Cake price in USD\n * @param poolLiquidityUsd Total pool liquidity in USD\n * @returns\n */\nexport const getFarmApr = (poolWeight: BigNumber, cakePriceUsd: BigNumber, poolLiquidityUsd: BigNumber): number => {\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight)\n  const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\nexport default null\n","export const tokenEarnedPerThousandDollarsCompounding = ({\n  numberOfDays,\n  farmApr,\n  tokenPrice,\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n  const timesCompounded = 365 * compoundFrequency\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  let aprAsDecimal = farmApr / 100\n\n  if (performanceFee) {\n    // Reduce the APR by the % performance fee\n    const feeRelativeToApr = (farmApr / 100) * performanceFee\n    const aprAfterFee = farmApr - feeRelativeToApr\n    aprAsDecimal = aprAfterFee / 100\n  }\n\n  const daysAsDecimalOfYear = numberOfDays / 365\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\n  const principal = 1000 / tokenPrice\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\n  const interestEarned = finalAmount - principal\n\n  return parseFloat(interestEarned.toFixed(roundingDecimals))\n}\n\nexport const getRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage\n}\n","import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text } from '@rug-zombie-libs/uikit'\n\ninterface TextProps {\n  isDisabled?: boolean\n  fontSize?: string\n  color?: string\n  bold?: boolean\n}\n\ninterface BalanceProps extends TextProps {\n  value?: number\n  decimals?: number\n  unit?: string\n}\n\nconst Balance: React.FC<BalanceProps> = ({ value, fontSize, color, decimals, isDisabled, unit, bold }) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n\n  return (\n    <Text bold={bold} color={isDisabled ? 'textDisabled' : color} fontSize={fontSize}>\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {value && unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nBalance.defaultProps = {\n  fontSize: '32px',\n  isDisabled: false,\n  color: 'text',\n  decimals: 3,\n}\n\nexport default Balance\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex, Box } from '@rug-zombie-libs/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  tokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n  roundingDecimals?: number\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  tokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol = 'CAKE',\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {t('Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {t('ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {earningTokenSymbol} {t('per')} $1000\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand30D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Box mb=\"28px\" maxWidth=\"280px\">\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t(\n            `Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.`,\n            { fee: compoundFrequency.toLocaleString() },\n          )}\n        </Text>\n        {performanceFee && (\n          <Text mt=\"14px\" fontSize=\"12px\" color=\"textSubtle\">\n            {t(`All estimated rates take into account this pool's %fee%% performance fee`, { fee: performanceFee })}\n          </Text>\n        )}\n      </Box>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@rug-zombie-libs/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getPoolApr } from 'utils/apr'\nimport { getAddress } from 'utils/addressHelpers'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\nimport { useGetApiPrice } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { Pool } from 'state/types'\nimport { BASE_EXCHANGE_URL } from 'config'\n\ninterface AprRowProps {\n  pool: Pool\n  stakingTokenPrice: number\n  isAutoVault?: boolean\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst AprRow: React.FC<AprRowProps> = ({\n  pool,\n  stakingTokenPrice,\n  isAutoVault = false,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const { stakingToken, earningToken, totalStaked, isFinished, tokenPerBlock } = pool\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.'),\n    { placement: 'bottom-end' },\n  )\n\n  const earningTokenPrice = useGetApiPrice(earningToken.address ? getAddress(earningToken.address) : '')\n  const apr = getPoolApr(\n    stakingTokenPrice,\n    earningTokenPrice,\n    getBalanceNumber(totalStaked, stakingToken.decimals),\n    parseFloat(tokenPerBlock),\n  )\n\n  // // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0\n  const roundingDecimals = isHighValueToken ? 4 : 2\n\n  const earningsPercentageToDisplay = () => {\n    if (isAutoVault) {\n      const oneThousandDollarsWorthOfToken = 1000 / earningTokenPrice\n      const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n        numberOfDays: 365,\n        farmApr: apr,\n        tokenPrice: earningTokenPrice,\n        roundingDecimals,\n        compoundFrequency,\n        performanceFee,\n      })\n      return getRoi({\n        amountEarned: tokenEarnedPerThousand365D,\n        amountInvested: oneThousandDollarsWorthOfToken,\n      })\n    }\n    return apr\n  }\n\n  const apyModalLink =\n    stakingToken.address &&\n    `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${stakingToken.address[process.env.REACT_APP_CHAIN_ID]}`\n\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      tokenPrice={earningTokenPrice}\n      apr={apr}\n      linkLabel={`${t('Get')} ${stakingToken.symbol}`}\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\n      earningTokenSymbol={earningToken.symbol}\n      roundingDecimals={isHighValueToken ? 4 : 2}\n      compoundFrequency={compoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef}>{isAutoVault ? t('APY') : t('APR')}:</TooltipText>\n      {isFinished || !apr ? (\n        <Skeleton width=\"82px\" height=\"32px\" />\n      ) : (\n        <Flex alignItems=\"center\">\n          <Balance\n            fontSize=\"16px\"\n            isDisabled={isFinished}\n            value={earningsPercentageToDisplay()}\n            decimals={2}\n            unit=\"%\"\n            bold\n          />\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Flex>\n      )}\n    </Flex>\n  )\n}\n\nexport default AprRow\n","import styled from 'styled-components'\nimport { Card } from '@rug-zombie-libs/uikit'\n\nconst StyledCard = styled(Card)<{ isStaking?: boolean; isFinished?: boolean }>`\n  max-width: 352px;\n  margin: 0 8px 24px;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  display: flex;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  box-shadow: ${({ isStaking }) =>\n    isStaking\n      ? '0px 0px 0px 2px #53DEE9;'\n      : '0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05)'};\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n  }\n`\n\nexport default StyledCard\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon } from '@rug-zombie-libs/uikit'\n\nconst CoreTag = (props) => (\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = (props) => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = (props) => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n    Binance\n  </Tag>\n)\n\nconst DualTag = (props) => (\n  <Tag variant=\"textSubtle\" outline {...props}>\n    Dual\n  </Tag>\n)\n\nconst ManualPoolTag = (props) => (\n  <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n    Manual\n  </Tag>\n)\n\nconst CompoundingPoolTag = (props) => (\n  <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n    Auto\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  Flex,\n  MetamaskIcon,\n  Text,\n  TooltipText,\n  LinkExternal,\n  TimerIcon,\n  Skeleton,\n  useTooltip,\n} from '@rug-zombie-libs/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { useBlock } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport Balance from 'components/Balance'\n\ninterface ExpandedFooterProps {\n  pool: Pool\n  account: string\n  performanceFee?: number\n  isAutoVault?: boolean\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({\n  pool,\n  account,\n  performanceFee = 0,\n  isAutoVault = false,\n  totalCakeInVault,\n}) => {\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n  const { stakingToken, earningToken, totalStaked, startBlock, endBlock, isFinished, contractAddress } = pool\n\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const imageSrc = `${BASE_URL}/images/tokens/${earningToken.symbol.toLowerCase()}.png`\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-end' },\n  )\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total staked:')}</Text>\n        <Flex alignItems=\"flex-start\">\n          {totalStaked ? (\n            <>\n              <Balance\n                fontSize=\"14px\"\n                value={\n                  isAutoVault\n                    ? getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n                    : getBalanceNumber(totalStaked, stakingToken.decimals)\n                }\n              />\n              <Text ml=\"4px\" fontSize=\"14px\">\n                {stakingToken.symbol}\n              </Text>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n        </Flex>\n      </Flex>\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('End') : t('Start')}:</Text>\n          <Flex alignItems=\"center\">\n            {blocksRemaining || blocksUntilStart ? (\n              <Balance\n                color=\"primary\"\n                fontSize=\"14px\"\n                value={hasPoolStarted ? blocksRemaining : blocksUntilStart}\n                decimals={0}\n              />\n            ) : (\n              <Skeleton width=\"54px\" height=\"21px\" />\n            )}\n            <Text ml=\"4px\" color=\"primary\" small>\n              {t('blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Flex>\n        </Flex>\n      )}\n      {isAutoVault && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          {tooltipVisible && tooltip}\n          <TooltipText ref={targetRef} small>\n            {t('Performance Fee')}\n          </TooltipText>\n          <Flex alignItems=\"center\">\n            <Text ml=\"4px\" small>\n              {performanceFee / 100}%\n            </Text>\n          </Flex>\n        </Flex>\n      )}\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal bold={false} small href={earningToken.projectLink}>\n          {t('View Project Site')}\n        </LinkExternal>\n      </Flex>\n      {poolContractAddress && (\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\n          <LinkExternal\n            bold={false}\n            small\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n          >\n            {t('View Contract')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {account && isMetaMaskInScope && tokenAddress && (\n        <Flex justifyContent=\"flex-end\">\n          <Text\n            color=\"primary\"\n            small\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n          >\n            Add to Metamask\n          </Text>\n          <MetamaskIcon ml=\"4px\" />\n        </Flex>\n      )}\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip, Box } from '@rug-zombie-libs/uikit'\nimport { Pool } from 'state/types'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport ExpandedFooter from './ExpandedFooter'\n\ninterface FooterProps {\n  pool: Pool\n  account: string\n  performanceFee?: number\n  isAutoVault?: boolean\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\n\nconst Footer: React.FC<FooterProps> = ({\n  pool,\n  account,\n  performanceFee = 0,\n  isAutoVault = false,\n  totalCakeInVault,\n}) => {\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom-end',\n  })\n\n  return (\n    <CardFooter>\n      <ExpandableButtonWrapper>\n        <Flex alignItems=\"center\">\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n          {tooltipVisible && tooltip}\n          <Box ref={targetRef}>\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n          </Box>\n        </Flex>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && (\n        <ExpandedFooter\n          pool={pool}\n          account={account}\n          performanceFee={performanceFee}\n          isAutoVault={isAutoVault}\n          totalCakeInVault={totalCakeInVault}\n        />\n      )}\n    </CardFooter>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { CardHeader, Heading, Text, Flex, Image } from '@rug-zombie-libs/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string }>`\n  background: ${({ isFinished, background, theme }) =>\n    isFinished ? \"#101820\" : theme.colors.primary};\n`\n\nconst StyledCardHeader: React.FC<{\n  earningTokenSymbol: string\n  stakingTokenSymbol: string\n  isAutoVault?: boolean\n  isFinished?: boolean\n}> = ({ earningTokenSymbol, stakingTokenSymbol, isFinished = false, isAutoVault = false }) => {\n  const { t } = useTranslation()\n  const poolImageSrc = `${stakingTokenSymbol}.png`.toLowerCase()\n  const isCakePool = earningTokenSymbol === 'CAKE' && stakingTokenSymbol === 'CAKE'\n\n  const getSubHeading = () => {\n    if (isAutoVault) {\n      return `${t('Automatic restaking')}`\n    }\n    if (isCakePool) {\n      return `${t('Earn CAKE, stake CAKE')}`\n    }\n    return `${t('Stake')} ${stakingTokenSymbol}`\n  }\n\n  return (\n    <Wrapper isFinished={isFinished} color=\"#101820\" >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\">\n          <Heading color={isFinished ? 'textDisabled' : 'body'} size=\"lg\">\n            {`Earn ${earningTokenSymbol} NFT`}\n          </Heading>\n          <Text color={isFinished ? 'textDisabled' : 'textSubtle'}>{getSubHeading()}</Text>\n        </Flex>\n        <Image src={`/images/pools/${poolImageSrc}`} alt={earningTokenSymbol} width={64} height={64} />\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledCardHeader\n","import React, { useState, useCallback } from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@rug-zombie-libs/uikit'\nimport { useSousApprove } from 'hooks/useApprove'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { getAddress } from 'utils/addressHelpers'\nimport { Pool } from 'state/types'\n\ninterface ApprovalActionProps {\n  pool: Pool\n  isLoading?: boolean\n}\n\nconst ApprovalAction: React.FC<ApprovalActionProps> = ({ pool, isLoading = false }) => {\n  const { sousId, stakingToken, earningToken, isFinished } = pool\n  const { t } = useTranslation()\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { onApprove } = useSousApprove(stakingTokenContract, sousId)\n  const { toastSuccess, toastError } = useToast()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      if (txHash) {\n        toastSuccess(`${t('Contract Enabled')}`, `${t(`You can now stake in the ${earningToken.symbol} pool!`)}`)\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(\n          `${t('Error')}`,\n          `${t(`Please try again. Confirm the transaction and make sure you are paying enough gas!`)}`,\n        )\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError('Error', e?.message)\n    }\n  }, [onApprove, setRequestedApproval, toastSuccess, toastError, t, earningToken])\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={isFinished || requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default ApprovalAction\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWeb3React()\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\n    return tx\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@rug-zombie-libs/uikit'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport useTheme from 'hooks/useTheme'\n\ninterface NotEnoughTokensModalProps {\n  tokenSymbol: string\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Modal\n      title={`${tokenSymbol} ${t('required')}`}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Text color=\"failure\" bold>\n        {t('Insufficient %tokensymbol% balance', { tokensymbol: tokenSymbol })}\n      </Text>\n      <Text mt=\"24px\">{t(`You’ll need %tokensymbol% to stake in this pool!`, { tokensymbol: tokenSymbol })}</Text>\n      <Text>\n        {t(`Buy some %tokensymbol%, or make sure your %tokensymbol% isn’t in another pool or LP.`, {\n          tokensymbol: tokenSymbol,\n        })}\n      </Text>\n      <Button mt=\"24px\" as=\"a\" external href={BASE_EXCHANGE_URL}>\n        {t('Buy')} {tokenSymbol}\n      </Button>\n      <StyledLink href=\"https://yieldwatch.net\" external>\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\n          {t('Locate Assets')}\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\n        </Button>\n      </StyledLink>\n      <Button variant=\"text\" onClick={onDismiss}>\n        {t('Close window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default NotEnoughTokensModal\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmergencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23, 78]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from '@rug-zombie-libs/uikit'\n\ninterface PercentageButtonProps {\n  onClick: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst PercentageButton: React.FC<PercentageButtonProps> = ({ children, onClick }) => {\n  return (\n    <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={onClick}>\n      {children}\n    </StyledButton>\n  )\n}\n\nexport default PercentageButton\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon, Link } from '@rug-zombie-libs/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useSousStake } from 'hooks/useStake'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport PercentageButton from './PercentageButton'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingMax: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst StakeModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingMax,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss,\n}) => {\n  const { sousId, stakingToken, earningToken } = pool\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  const { onStake } = useSousStake(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId)\n  const { toastSuccess, toastError } = useToast()\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [percent, setPercent] = useState(0)\n\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\n\n  const handleStakeInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = event.target.value || '0'\n    const convertedInput = getDecimalAmount(new BigNumber(inputValue), stakingToken.decimals)\n    const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n    setStakeAmount(inputValue)\n    setPercent(Math.min(percentage, 100))\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n    const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n    setStakeAmount(amountToStake)\n    setPercent(sliderPercent)\n  }\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n\n    if (isRemovingStake) {\n      // unstaking\n      try {\n        await onUnstake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Unstaked')}!`,\n          t(`Your ${earningToken.symbol} earnings have also been harvested to your wallet!`),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    } else {\n      try {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals)\n        toastSuccess(`${t('Staked')}!`, t(`Your ${stakingToken.symbol} funds have been staked in the pool!`))\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image src={`/images/tokens/${stakingToken.symbol}.png`} width={24} height={24} alt={stakingToken.symbol} />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onChange={handleStakeInputChange}\n        currencyValue={`~${usdValueStaked || 0} USD`}\n      />\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        Balance: {getFullDisplayBalance(stakingMax, stakingToken.decimals)}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(100)}>MAX</PercentageButton>\n      </Flex>\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <StyledLink external href={BASE_EXCHANGE_URL}>\n          <Button width=\"100%\" mt=\"8px\" variant=\"secondary\">\n            {t('Get')} {stakingToken.symbol}\n          </Button>\n        </StyledLink>\n      )}\n    </Modal>\n  )\n}\n\nexport default StakeModal\n","import React from 'react'\nimport {\n  Flex,\n  Text,\n  Button,\n  IconButton,\n  AddIcon,\n  MinusIcon,\n  Heading,\n  useModal,\n  Skeleton,\n} from '@rug-zombie-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\nimport StakeModal from '../Modals/StakeModal'\n\ninterface StakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  stakedBalance: BigNumber\n  isBnbPool: boolean\n  isStaked: ConstrainBoolean\n  isLoading?: boolean\n}\n\nconst StakeAction: React.FC<StakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  stakedBalance,\n  isBnbPool,\n  isStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken, earningToken, stakingLimit, isFinished } = pool\n  const { t } = useTranslation()\n  const convertedLimit = getDecimalAmount(new BigNumber(stakingLimit), earningToken.decimals)\n  const stakingMax =\n    stakingLimit && stakingTokenBalance.isGreaterThan(convertedLimit) ? convertedLimit : stakingTokenBalance\n  const formattedBalance = formatNumber(getBalanceNumber(stakedBalance, stakingToken.decimals), 3, 3)\n  const stakingMaxDollarValue = formatNumber(\n    getBalanceNumber(stakedBalance.multipliedBy(stakingTokenPrice), stakingToken.decimals),\n  )\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal stakingMax={stakingMax} isBnbPool={isBnbPool} pool={pool} stakingTokenPrice={stakingTokenPrice} />,\n  )\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingMax={stakedBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const renderStakeAction = () => {\n    return isStaked ? (\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <Heading>{formattedBalance}</Heading>\n          <Text fontSize=\"12px\" color=\"textSubtle\">{`~${stakingMaxDollarValue || 0} USD`}</Text>\n        </Flex>\n        <Flex>\n          <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n            <MinusIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n          <IconButton\n            variant=\"secondary\"\n            onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n            disabled={isFinished}\n          >\n            <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n          </IconButton>\n        </Flex>\n      </Flex>\n    ) : (\n      <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n        {t('Stake')}\n      </Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport {\n  Modal,\n  Text,\n  Button,\n  Heading,\n  Flex,\n  AutoRenewIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  HelpIcon,\n  useTooltip,\n} from '@rug-zombie-libs/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport { useSousHarvest } from 'hooks/useHarvest'\nimport { useSousStake } from 'hooks/useStake'\nimport useToast from 'hooks/useToast'\nimport { Token } from 'config/constants/types'\n\ninterface CollectModalProps {\n  formattedBalance: string\n  fullBalance: string\n  earningToken: Token\n  earningsDollarValue: string\n  sousId: number\n  isBnbPool: boolean\n  isCompoundPool?: boolean\n  onDismiss?: () => void\n}\n\nconst CollectModal: React.FC<CollectModalProps> = ({\n  formattedBalance,\n  fullBalance,\n  earningToken,\n  earningsDollarValue,\n  sousId,\n  isBnbPool,\n  isCompoundPool = false,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n  const { onStake } = useSousStake(sousId, isBnbPool)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [shouldCompound, setShouldCompound] = useState(isCompoundPool)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text mb=\"12px\">{t('Compound: collect and restake CAKE into pool.')}</Text>\n      <Text>{t('Harvest: collect CAKE and send to wallet')}</Text>\n    </>,\n    { placement: 'bottom-end', tooltipOffset: [20, 10] },\n  )\n\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n    // compounding\n    if (shouldCompound) {\n      try {\n        await onStake(fullBalance, earningToken.decimals)\n        toastSuccess(\n          `${t('Compounded')}!`,\n          t(`Your ${earningToken.symbol} earnings have been re-invested into the pool!`),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    } else {\n      // harvesting\n      try {\n        await onReward()\n        toastSuccess(`${t('Harvested')}!`, t(`Your ${earningToken.symbol} earnings have been sent to your wallet!`))\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  return (\n    <Modal\n      title={`${earningToken.symbol} ${t('Harvest')}`}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {isCompoundPool && (\n        <Flex justifyContent=\"center\" alignItems=\"center\" mb=\"24px\">\n          <ButtonMenu\n            activeIndex={shouldCompound ? 0 : 1}\n            scale=\"sm\"\n            variant=\"subtle\"\n            onItemClick={(index) => setShouldCompound(!index)}\n          >\n            <ButtonMenuItem as=\"button\">{t('Compound')}</ButtonMenuItem>\n            <ButtonMenuItem as=\"button\">{t('Harvest')}</ButtonMenuItem>\n          </ButtonMenu>\n          <Flex ml=\"10px\" ref={targetRef}>\n            <HelpIcon color=\"textSubtle\" />\n          </Flex>\n          {tooltipVisible && tooltip}\n        </Flex>\n      )}\n\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\n        <Text>{shouldCompound ? t('Compounding') : t('Harvesting')}:</Text>\n        <Flex flexDirection=\"column\">\n          <Heading>\n            {formattedBalance} {earningToken.symbol}\n          </Heading>\n          <Text fontSize=\"12px\" color=\"textSubtle\">{`~${earningsDollarValue || 0} USD`}</Text>\n        </Flex>\n      </Flex>\n\n      <Button\n        mt=\"8px\"\n        onClick={handleHarvestConfirm}\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      <Button variant=\"text\" onClick={onDismiss} pb=\"0px\">\n        {t('Close window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default CollectModal\n","import React from 'react'\nimport { Flex, Text, Button, Heading, useModal, Skeleton } from '@rug-zombie-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { Token } from 'config/constants/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { useGetApiPrice } from 'state/hooks'\nimport CollectModal from '../Modals/CollectModal'\n\ninterface HarvestActionsProps {\n  earnings: BigNumber\n  earningToken: Token\n  sousId: number\n  isBnbPool: boolean\n  isLoading?: boolean\n}\n\nconst HarvestActions: React.FC<HarvestActionsProps> = ({\n  earnings,\n  earningToken,\n  sousId,\n  isBnbPool,\n  isLoading = false,\n}) => {\n  const { t } = useTranslation()\n  const earningTokenPrice = useGetApiPrice(earningToken.address ? getAddress(earningToken.address) : '')\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(getBalanceNumber(earnings, earningToken.decimals), 3, 3)\n  const earningsDollarValue = formatNumber(\n    getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals),\n  )\n  const hasEarnings = earnings.toNumber() > 0\n  const isCompoundPool = sousId === 0\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningsDollarValue}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isCompoundPool}\n    />,\n  )\n\n  return (\n    <Flex flexDirection=\"column\" mb=\"16px\">\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          {isLoading ? (\n            <Skeleton width=\"80px\" height=\"48px\" />\n          ) : (\n            <>\n              <Heading color={hasEarnings ? 'text' : 'textDisabled'}>{hasEarnings ? formattedBalance : 0}</Heading>\n              <Text fontSize=\"12px\" color={hasEarnings ? 'textSubtle' : 'textDisabled'}>\n                {`~${hasEarnings ? earningsDollarValue : 0} USD`}\n              </Text>\n            </>\n          )}\n        </Flex>\n        <Flex>\n          <Button disabled={!hasEarnings} onClick={onPresentCollect}>\n            {isCompoundPool ? t('Collect') : t('Harvest')}\n          </Button>\n        </Flex>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default HarvestActions\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from '@rug-zombie-libs/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { PoolCategory } from 'config/constants/types'\nimport { Pool } from 'state/types'\nimport ApprovalAction from './ApprovalAction'\nimport StakeActions from './StakeActions'\nimport HarvestActions from './HarvestActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\ninterface CardActionsProps {\n  pool: Pool\n  stakedBalance: BigNumber\n  accountHasStakedBalance: boolean\n  stakingTokenPrice: number\n}\n\nconst CardActions: React.FC<CardActionsProps> = ({\n  pool,\n  stakedBalance,\n  accountHasStakedBalance,\n  stakingTokenPrice,\n}) => {\n  const { sousId, stakingToken, earningToken, harvest, poolCategory, userData } = pool\n  // Pools using native BNB behave differently than pools using a token\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const { t } = useTranslation()\n  const allowance = new BigNumber(userData?.allowance || 0)\n  const stakingTokenBalance = new BigNumber(userData?.stakingTokenBalance || 0)\n  const earnings = new BigNumber(userData?.pendingReward || 0)\n  const needsApproval = !accountHasStakedBalance && !allowance.gt(0) && !isBnbPool\n  const isStaked = stakedBalance.gt(0)\n  const isLoading = !userData\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        {harvest && (\n          <>\n            <Box display=\"inline\">\n              <InlineText color=\"secondary\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                {`${earningToken.symbol} `}\n              </InlineText>\n              <InlineText color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                {t(`earned`)}\n              </InlineText>\n            </Box>\n            <HarvestActions\n              earnings={earnings}\n              earningToken={earningToken}\n              sousId={sousId}\n              isBnbPool={isBnbPool}\n              isLoading={isLoading}\n            />\n          </>\n        )}\n        <Box display=\"inline\">\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? stakingToken.symbol : t(`stake`)}{' '}\n          </InlineText>\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? t(`staked`) : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {needsApproval ? (\n          <ApprovalAction pool={pool} isLoading={isLoading} />\n        ) : (\n          <StakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            stakingTokenPrice={stakingTokenPrice}\n            stakedBalance={stakedBalance}\n            isBnbPool={isBnbPool}\n            isStaked={isStaked}\n          />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CardActions\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport { CardBody, Flex, Text, CardRibbon } from '@rug-zombie-libs/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useGetApiPrice } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport AprRow from './AprRow'\nimport StyledCard from './StyledCard'\nimport CardFooter from './CardFooter'\nimport StyledCardHeader from './StyledCardHeader'\nimport CardActions from './CardActions'\n\nconst PoolCard: React.FC<{ pool: Pool; account: string }> = ({ pool, account }) => {\n  const { sousId, stakingToken, earningToken, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedBalance = new BigNumber(userData?.stakedBalance || 0)\n  const accountHasStakedBalance = stakedBalance?.toNumber() > 0\n  const stakingTokenPrice = useGetApiPrice(stakingToken.address ? getAddress(stakingToken.address) : '')\n\n  return (\n    <StyledCard\n      isStaking={!isFinished && accountHasStakedBalance}\n      isFinished={isFinished && sousId !== 0}\n      ribbon={isFinished && <CardRibbon variantColor=\"textDisabled\" text={`${t('Finished')}`} />}\n    >\n      <StyledCardHeader\n        earningTokenSymbol={earningToken.symbol}\n        stakingTokenSymbol={stakingToken.symbol}\n        isFinished={isFinished && sousId !== 0}\n      />\n      <CardBody>\n        <AprRow pool={pool} stakingTokenPrice={stakingTokenPrice} />\n        <Flex mt=\"24px\" flexDirection=\"column\">\n          {account ? (\n            <CardActions\n              pool={pool}\n              stakedBalance={stakedBalance}\n              stakingTokenPrice={stakingTokenPrice}\n              accountHasStakedBalance={accountHasStakedBalance}\n            />\n          ) : (\n            <>\n              <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                {t('Start earning')}\n              </Text>\n              <UnlockButton />\n            </>\n          )}\n        </Flex>\n      </CardBody>\n      <CardFooter pool={pool} account={account} />\n    </StyledCard>\n  )\n}\n\nexport default PoolCard\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useCakeVaultContract } from 'hooks/useContract'\n\nconst useGetVaultUserInfo = (lastUpdated?: number) => {\n  const { account } = useWeb3React()\n  const cakeVaultContract = useCakeVaultContract()\n  const [userInfo, setUserInfo] = useState({\n    shares: BIG_ZERO,\n    cakeAtLastUserAction: BIG_ZERO,\n    lastDepositedTime: '',\n    lastUserActionTime: '',\n  })\n\n  useEffect(() => {\n    //   user-specific vault contract fetches\n    const fetchUserVaultInfo = async () => {\n      const userContractInfo = await cakeVaultContract.methods.userInfo(account).call()\n      setUserInfo({\n        shares: new BigNumber(userContractInfo.shares),\n        cakeAtLastUserAction: new BigNumber(userContractInfo.cakeAtLastUserAction),\n        lastDepositedTime: userContractInfo.lastDepositedTime,\n        lastUserActionTime: userContractInfo.lastUserActionTime,\n      })\n    }\n\n    if (account) {\n      fetchUserVaultInfo()\n    }\n  }, [account, cakeVaultContract, lastUpdated])\n\n  return userInfo\n}\n\nexport default useGetVaultUserInfo\n","import BigNumber from 'bignumber.js'\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance'\n\nexport const convertSharesToCake = (\n  shares: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound)\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\n}\n\nexport const convertCakeToShares = (\n  cake: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound)\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport makeBatchRequest from 'utils/makeBatchRequest'\n\nconst useGetVaultSharesInfo = (lastUpdated?: number) => {\n  const cakeVaultContract = useCakeVaultContract()\n  const [totalShares, setTotalShares] = useState(null)\n  const [totalCakeInVault, setTotalCakeInVault] = useState(null)\n  const [pricePerFullShare, setPricePerFullShare] = useState(null)\n\n  useEffect(() => {\n    const getTotalShares = async () => {\n      const [sharePrice, shares] = await makeBatchRequest([\n        cakeVaultContract.methods.getPricePerFullShare().call,\n        cakeVaultContract.methods.totalShares().call,\n      ])\n      const sharePriceAsBigNumber = new BigNumber(sharePrice as string)\n      const totalSharesAsBigNumber = new BigNumber(shares as string)\n      const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\n      setPricePerFullShare(sharePriceAsBigNumber)\n      setTotalShares(totalSharesAsBigNumber)\n      setTotalCakeInVault(totalCakeInVaultEstimate.cakeAsBigNumber)\n    }\n    getTotalShares()\n  }, [cakeVaultContract, lastUpdated])\n\n  return { totalShares, totalCakeInVault, pricePerFullShare }\n}\n\nexport default useGetVaultSharesInfo\n","import { useEffect, useState } from 'react'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport makeBatchRequest from 'utils/makeBatchRequest'\n\nexport interface VaultFees {\n  performanceFee: string\n  callFee: string\n  withdrawalFee: string\n  withdrawalFeePeriod: string\n}\n\nconst useGetVaultFees = () => {\n  const cakeVaultContract = useCakeVaultContract()\n  const [fees, setFees] = useState({\n    performanceFee: null,\n    callFee: null,\n    withdrawalFee: null,\n    withdrawalFeePeriod: null,\n  })\n\n  useEffect(() => {\n    const getFees = async () => {\n      const [\n        contractPerformanceFee,\n        contractWithdrawalFeeTimePeriod,\n        contractCallFee,\n        contractWithdrawalFee,\n      ] = await makeBatchRequest([\n        cakeVaultContract.methods.performanceFee().call,\n        cakeVaultContract.methods.withdrawFeePeriod().call,\n        cakeVaultContract.methods.callFee().call,\n        cakeVaultContract.methods.withdrawFee().call,\n      ])\n\n      setFees({\n        performanceFee: contractPerformanceFee as string,\n        callFee: contractCallFee as string,\n        withdrawalFee: contractWithdrawalFee as string,\n        withdrawalFeePeriod: contractWithdrawalFeeTimePeriod as string,\n      })\n    }\n\n    getFees()\n  }, [cakeVaultContract])\n\n  return fees\n}\n\nexport default useGetVaultFees\n","import React from 'react'\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@rug-zombie-libs/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getPoolApr } from 'utils/apr'\nimport { getAddress } from 'utils/addressHelpers'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\nimport { useGetApiPrice } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { Pool } from 'state/types'\nimport { BASE_EXCHANGE_URL } from 'config'\n\ninterface NFTmrRowProps {\n  pool: Pool\n  stakingTokenPrice: number\n  isAutoVault?: boolean\n  compoundFrequency?: number\n  performanceFee?: number\n}\n// NFT Minting Rate Row\nconst NFTmrRow: React.FC<NFTmrRowProps> = ({\n  pool,\n  stakingTokenPrice,\n  isAutoVault = false,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const { stakingToken, earningToken, totalStaked, isFinished, tokenPerBlock } = pool\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('NFT Mint Rate, is the number of NFT\\'s created for this Grave every block.'),\n    { placement: 'bottom-end' },\n  )\n\n  const earningTokenPrice = useGetApiPrice(earningToken.address ? getAddress(earningToken.address) : '')\n  const apr = getPoolApr(\n    stakingTokenPrice,\n    earningTokenPrice,\n    getBalanceNumber(totalStaked, stakingToken.decimals),\n    parseFloat(tokenPerBlock),\n  )\n\n  // // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0\n  const roundingDecimals = isHighValueToken ? 4 : 2\n\n  const earningsPercentageToDisplay = () => {\n    if (isAutoVault) {\n      const oneThousandDollarsWorthOfToken = 1000 / earningTokenPrice\n      const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n        numberOfDays: 365,\n        farmApr: apr,\n        tokenPrice: earningTokenPrice,\n        roundingDecimals,\n        compoundFrequency,\n        performanceFee,\n      })\n      return getRoi({\n        amountEarned: tokenEarnedPerThousand365D,\n        amountInvested: oneThousandDollarsWorthOfToken,\n      })\n    }\n    return apr\n  }\n\n  const apyModalLink =\n    stakingToken.address &&\n    `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${stakingToken.address[process.env.REACT_APP_CHAIN_ID]}`\n\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      tokenPrice={earningTokenPrice}\n      apr={apr}\n      linkLabel={`${t('Get')} ${stakingToken.symbol}`}\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\n      earningTokenSymbol={earningToken.symbol}\n      roundingDecimals={isHighValueToken ? 4 : 2}\n      compoundFrequency={compoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef}>{t('NFT Mint Rate')}:</TooltipText>\n      {isFinished || !apr ? (\n        <Skeleton width=\"82px\" height=\"32px\" />\n      ) : (\n        <Flex alignItems=\"center\">\n          N/A\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Flex>\n      )}\n    </Flex>\n  )\n}\n\nexport default NFTmrRow\n","import React from 'react'\nimport {\n  Flex,\n  TooltipText,\n  IconButton,\n  useModal,\n  CalculateIcon,\n  Skeleton,\n  useTooltip,\n  TimerIcon,\n} from '@rug-zombie-libs/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\n\ninterface NFTmrRowProps {\n  pool: Pool\n  stakingTokenPrice: number\n  isAutoVault?: boolean\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\n// NFT Minting Rate Row\nconst MinimumDepositTime: React.FC<NFTmrRowProps> = ({\n    pool,\n  }) => {\n  const { t } = useTranslation()\n  const { stakingToken, earningToken, totalStaked, isFinished, tokenPerBlock } = pool\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Minimum time you are required to stake before receiving rewards. Unstaking your tokens may reset or increase your remaining time.'),\n    { placement: 'bottom-end' },\n  )\n\n  return (\n    <Flex alignItems='center' justifyContent='space-between'>\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef}>{t('Minimum Deposit Time')}:</TooltipText>\n      <Flex alignItems='center'>\n        N/A\n        <IconButton variant='text' scale='sm'>\n          <TimerIcon color='textSubtle' width='18px' />\n        </IconButton>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default MinimumDepositTime\n","import styled from 'styled-components'\nimport { Card } from '@rug-zombie-libs/uikit'\n\nconst StyledCard = styled(Card)<{ isStaking?: boolean; isFinished?: boolean }>`\n  max-width: 352px;\n  margin: 0 8px 24px;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  display: flex;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  box-shadow: ${({ isStaking }) =>\n    isStaking\n      ? '0px 0px 0px 2px #53DEE9;'\n      : '0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05)'};\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n  }\n`\n\nexport default StyledCard\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  Flex,\n  MetamaskIcon,\n  Text,\n  TooltipText,\n  LinkExternal,\n  TimerIcon,\n  Skeleton,\n  useTooltip,\n} from '@rug-zombie-libs/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { useBlock } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport Balance from 'components/Balance'\n\ninterface ExpandedFooterProps {\n  pool: Pool\n  account: string\n  performanceFee?: number\n  isAutoVault?: boolean\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({\n  pool,\n  account,\n  performanceFee = 0,\n  isAutoVault = false,\n  totalCakeInVault,\n}) => {\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n  const { stakingToken, earningToken, totalStaked, startBlock, endBlock, isFinished, contractAddress } = pool\n\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const imageSrc = `${BASE_URL}/images/tokens/${earningToken.symbol.toLowerCase()}.png`\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-end' },\n  )\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total staked:')}</Text>\n        <Flex alignItems=\"flex-start\">\n          {totalStaked ? (\n            <>\n              <Balance\n                fontSize=\"14px\"\n                value={\n                  isAutoVault\n                    ? getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n                    : getBalanceNumber(totalStaked, stakingToken.decimals)\n                }\n              />\n              <Text ml=\"4px\" fontSize=\"14px\">\n                {stakingToken.symbol}\n              </Text>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n        </Flex>\n      </Flex>\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('End') : t('Start')}:</Text>\n          <Flex alignItems=\"center\">\n            {blocksRemaining || blocksUntilStart ? (\n              <Balance\n                color=\"primary\"\n                fontSize=\"14px\"\n                value={hasPoolStarted ? blocksRemaining : blocksUntilStart}\n                decimals={0}\n              />\n            ) : (\n              <Skeleton width=\"54px\" height=\"21px\" />\n            )}\n            <Text ml=\"4px\" color=\"primary\" small>\n              {t('blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Flex>\n        </Flex>\n      )}\n      {isAutoVault && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          {tooltipVisible && tooltip}\n          <TooltipText ref={targetRef} small>\n            {t('Performance Fee')}\n          </TooltipText>\n          <Flex alignItems=\"center\">\n            <Text ml=\"4px\" small>\n              {performanceFee / 100}%\n            </Text>\n          </Flex>\n        </Flex>\n      )}\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal bold={false} small href={earningToken.projectLink}>\n          {t('View Project Site')}\n        </LinkExternal>\n      </Flex>\n      {poolContractAddress && (\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\n          <LinkExternal\n            bold={false}\n            small\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n          >\n            {t('View Contract')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {account && isMetaMaskInScope && tokenAddress && (\n        <Flex justifyContent=\"flex-end\">\n          <Text\n            color=\"primary\"\n            small\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n          >\n            Add to Metamask\n          </Text>\n          <MetamaskIcon ml=\"4px\" />\n        </Flex>\n      )}\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip, Box } from '@rug-zombie-libs/uikit'\nimport { Pool } from 'state/types'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport ExpandedFooter from './ExpandedFooter'\n\ninterface FooterProps {\n  pool: Pool\n  account: string\n  performanceFee?: number\n  isAutoVault?: boolean\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\n\nconst Footer: React.FC<FooterProps> = ({\n  pool,\n  account,\n  performanceFee = 0,\n  isAutoVault = false,\n  totalCakeInVault,\n}) => {\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom-end',\n  })\n\n  return (\n    <CardFooter>\n      <ExpandableButtonWrapper>\n        <Flex alignItems=\"center\">\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n          {tooltipVisible && tooltip}\n          <Box ref={targetRef}>\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n          </Box>\n        </Flex>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && (\n        <ExpandedFooter\n          pool={pool}\n          account={account}\n          performanceFee={performanceFee}\n          isAutoVault={isAutoVault}\n          totalCakeInVault={totalCakeInVault}\n        />\n      )}\n    </CardFooter>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { CardHeader, Heading, Text, Flex, Image } from '@rug-zombie-libs/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string }>`\n  background: ${({ isFinished, background, theme }) =>\n    isFinished ? \"#101820\" : theme.colors.primary};\n`\n\nconst StyledCardHeader: React.FC<{\n  earningTokenSymbol: string\n  stakingTokenSymbol: string\n  isAutoVault?: boolean\n  isFinished?: boolean\n}> = ({ earningTokenSymbol, stakingTokenSymbol, isFinished = false, isAutoVault = false }) => {\n  const { t } = useTranslation()\n  const poolImageSrc = `${stakingTokenSymbol}.png`.toLowerCase()\n  const isCakePool = earningTokenSymbol === 'CAKE' && stakingTokenSymbol === 'CAKE'\n\n  const getSubHeading = () => {\n    if (isAutoVault) {\n      return `${t('Automatic restaking')}`\n    }\n    if (isCakePool) {\n      return `${t('Earn CAKE, stake CAKE')}`\n    }\n    return `${t('Stake')} ${stakingTokenSymbol} (example rug)`\n  }\n\n  return (\n    <Wrapper isFinished={isFinished} color=\"#101820\" >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\">\n          <Heading color={isFinished ? 'textDisabled' : 'body'} size=\"lg\">\n            {`Earn ${earningTokenSymbol} NFT`}\n          </Heading>\n          <Text color={isFinished ? 'textDisabled' : 'textSubtle'}>{getSubHeading()}</Text>\n        </Flex>\n        <Image src={`/images/pools/${poolImageSrc}`} alt={earningTokenSymbol} width={64} height={64} />\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledCardHeader\n","import React, { useState } from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@rug-zombie-libs/uikit'\nimport { ethers } from 'ethers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useCakeVaultContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { Pool } from 'state/types'\n\ninterface ApprovalActionProps {\n  pool: Pool\n  account: string\n  setLastUpdated: () => void\n  isLoading?: boolean\n}\n\nconst ApprovalAction: React.FC<ApprovalActionProps> = ({ pool, account, isLoading = false, setLastUpdated }) => {\n  const { stakingToken } = pool\n  const cakeVaultContract = useCakeVaultContract()\n  const cakeContract = useCake()\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n\n  const handleApprove = () => {\n    cakeContract.methods\n      .approve(cakeVaultContract.options.address, ethers.constants.MaxUint256)\n      .send({ from: account })\n      .on('sending', () => {\n        setRequestedApproval(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(\n          `${t('Contract Enabled')}`,\n          `${t(`You can now stake in the %symbol %vault!`, { symbol: stakingToken.symbol })}`,\n        )\n        setLastUpdated()\n        setRequestedApproval(false)\n      })\n      .on('error', (error) => {\n        console.error(error)\n        toastError(\n          `${t('Error')}`,\n          `${t(`Please try again. Confirm the transaction and make sure you are paying enough gas!`)}`,\n        )\n        setRequestedApproval(false)\n      })\n  }\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default ApprovalAction\n","import { useEffect, useState } from 'react'\n\nconst useWithdrawalFeeTimer = (lastDepositedTime: number, withdrawalFeePeriod = 259200) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false)\n\n  useEffect(() => {\n    const threeDaysFromDeposit = lastDepositedTime + withdrawalFeePeriod\n    const now = Math.floor(Date.now() / 1000)\n    const secondsRemainingCalc = threeDaysFromDeposit - now\n    const doesUnstakingFeeApply = secondsRemainingCalc > 0\n    if (doesUnstakingFeeApply) {\n      setSecondsRemaining(secondsRemainingCalc)\n      setHasUnstakingFee(true)\n    }\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining])\n\n  return { hasUnstakingFee, secondsRemaining }\n}\n\nexport default useWithdrawalFeeTimer\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = Math.abs(seconds)\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import React from 'react'\nimport { Text } from '@rug-zombie-libs/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\n\nconst WithdrawalFeeTimer: React.FC<{ secondsRemaining: number }> = ({ secondsRemaining }) => {\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\n\n  return (\n    <Text fontSize=\"14px\">\n      {days && days}d : {hours && hours}h : {minutes && minutes}m\n    </Text>\n  )\n}\n\nexport default WithdrawalFeeTimer\n","import React from 'react'\nimport { Flex, Text, TooltipText, useTooltip } from '@rug-zombie-libs/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\n\ninterface UnstakingFeeCountdownRowProps {\n  account?: string\n  withdrawalFee: string\n  lastDepositedTime: string\n  withdrawalFeePeriod?: string\n}\n\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({\n  account = true,\n  withdrawalFee,\n  lastDepositedTime,\n  withdrawalFeePeriod = '259200',\n}) => {\n  const { t } = useTranslation()\n  const feeAsDecimal = parseInt(withdrawalFee) / 100 || '-'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t(`Unstaking fee: %fee%%`, { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'bottom-start' },\n  )\n\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\n    parseInt(lastDepositedTime, 10),\n    parseInt(withdrawalFeePeriod, 10),\n  )\n\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        {parseInt(withdrawalFee) / 100 || '-'}%{' '}\n        {shouldShowTimer ? t('unstaking fee until') : t('unstaking fee if withdrawn within 72h')}\n      </TooltipText>\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\n    </Flex>\n  )\n}\n\nexport default UnstakingFeeCountdownRow\n","import React from 'react'\nimport { Text, Flex, useTooltip, TooltipText } from '@rug-zombie-libs/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { VaultFees } from 'hooks/cakeVault/useGetVaultFees'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\n\ninterface FeeSummaryProps {\n  stakingTokenSymbol: string\n  lastDepositedTime: string\n  vaultFees: VaultFees\n  stakeAmount: string\n}\n\nconst FeeSummary: React.FC<FeeSummaryProps> = ({ stakingTokenSymbol, lastDepositedTime, vaultFees, stakeAmount }) => {\n  const { t } = useTranslation()\n  const feeAsDecimal = parseInt(vaultFees.withdrawalFee) / 100\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t(`Unstaking fee: %fee%%`, { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'top-start' },\n  )\n\n  return (\n    <>\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        {tooltipVisible && tooltip}\n        <TooltipText ref={targetRef} small>\n          {t('Unstaking Fee')}\n        </TooltipText>\n        <Text fontSize=\"14px\">\n          {stakeAmount ? feeInCake : '-'} {stakingTokenSymbol}\n        </Text>\n      </Flex>\n      <UnstakingFeeCountdownRow\n        withdrawalFee={vaultFees.withdrawalFee}\n        withdrawalFeePeriod={vaultFees.withdrawalFeePeriod}\n        lastDepositedTime={lastDepositedTime}\n      />\n    </>\n  )\n}\n\nexport default FeeSummary\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@rug-zombie-libs/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport { VaultFees } from 'hooks/cakeVault/useGetVaultFees'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { Pool } from 'state/types'\nimport { VaultUser } from 'views/Pools/types'\nimport { convertCakeToShares } from '../../helpers'\nimport FeeSummary from './FeeSummary'\n\ninterface VaultStakeModalProps {\n  pool: Pool\n  stakingMax: BigNumber\n  stakingTokenPrice: number\n  account: string\n  userInfo: VaultUser\n  isRemovingStake?: boolean\n  pricePerFullShare?: BigNumber\n  vaultFees?: VaultFees\n  setLastUpdated: () => void\n  onDismiss?: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({\n  pool,\n  stakingMax,\n  stakingTokenPrice,\n  pricePerFullShare,\n  account,\n  userInfo,\n  isRemovingStake = false,\n  vaultFees,\n  onDismiss,\n  setLastUpdated,\n}) => {\n  const { stakingToken } = pool\n  const cakeVaultContract = useCakeVaultContract()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [percent, setPercent] = useState(0)\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(userInfo.lastDepositedTime))\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\n\n  const handleStakeInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = event.target.value || '0'\n    const convertedInput = new BigNumber(inputValue).multipliedBy(new BigNumber(10).pow(stakingToken.decimals))\n    const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n    setStakeAmount(inputValue)\n    setPercent(percentage > 100 ? 100 : percentage)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n    const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n    setStakeAmount(amountToStake)\n    setPercent(sliderPercent)\n  }\n\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\n    // trigger withdrawAll function if the withdrawal will leave 0.000000000000200000 CAKE or less\n    const triggerWithdrawAllThreshold = new BigNumber(200000)\n    const sharesRemaining = userInfo.shares.minus(shareStakeToWithdraw.sharesAsBigNumber)\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\n\n    if (isWithdrawingAll) {\n      cakeVaultContract.methods\n        .withdrawAll()\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          setLastUpdated()\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t(`${error.message} - Please try again.`))\n          setPendingTx(false)\n        })\n    } else {\n      cakeVaultContract.methods\n        .withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString())\n        // .toString() being called to fix a BigNumber error in prod\n        // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          setLastUpdated()\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t(`${error.message} - Please try again.`))\n          setPendingTx(false)\n        })\n    }\n  }\n\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\n    cakeVaultContract.methods\n      .deposit(convertedStakeAmount.toString())\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      .send({ from: account })\n      .on('sending', () => {\n        setPendingTx(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\n        setPendingTx(false)\n        onDismiss()\n        setLastUpdated()\n      })\n      .on('error', (error) => {\n        console.error(error)\n        // Remove message from toast before prod\n        toastError(t('Error'), t(`${error.message} - Please try again.`))\n        setPendingTx(false)\n      })\n  }\n\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n    setPendingTx(true)\n    // unstaking\n    if (isRemovingStake) {\n      handleWithdrawal(convertedStakeAmount)\n      // staking\n    } else {\n      handleDeposit(convertedStakeAmount)\n    }\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image src={`/images/tokens/${stakingToken.symbol}.png`} width={24} height={24} alt={stakingToken.symbol} />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onChange={handleStakeInputChange}\n        currencyValue={`~${usdValueStaked || 0} USD`}\n      />\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        Balance: {getFullDisplayBalance(stakingMax, stakingToken.decimals)}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\n          25%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\n          50%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\n          75%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\n          MAX\n        </StyledButton>\n      </Flex>\n      {isRemovingStake && hasUnstakingFee && (\n        <FeeSummary\n          stakingTokenSymbol={stakingToken.symbol}\n          lastDepositedTime={userInfo.lastDepositedTime}\n          vaultFees={vaultFees}\n          stakeAmount={stakeAmount}\n        />\n      )}\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <Button mt=\"8px\" as=\"a\" external href={BASE_EXCHANGE_URL} variant=\"secondary\">\n          {t('Get')} {stakingToken.symbol}\n        </Button>\n      )}\n    </Modal>\n  )\n}\n\nexport default VaultStakeModal\n","import React from 'react'\nimport { Flex, Text, IconButton, AddIcon, MinusIcon, Heading, useModal, Skeleton } from '@rug-zombie-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport { VaultFees } from 'hooks/cakeVault/useGetVaultFees'\nimport { VaultUser } from 'views/Pools/types'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport { convertSharesToCake } from '../../../helpers'\nimport VaultStakeModal from '../VaultStakeModal'\n\ninterface HasStakeActionProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  userInfo: VaultUser\n  pricePerFullShare: BigNumber\n  account: string\n  vaultFees: VaultFees\n  setLastUpdated: () => void\n}\n\nconst HasSharesActions: React.FC<HasStakeActionProps> = ({\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  userInfo,\n  pricePerFullShare,\n  account,\n  vaultFees,\n  setLastUpdated,\n}) => {\n  const { stakingToken } = pool\n  const { cakeAsBigNumber, cakeAsDisplayBalance } = convertSharesToCake(userInfo.shares, pricePerFullShare)\n\n  const stakedDollarValue = formatNumber(\n    getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals),\n  )\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <VaultStakeModal\n      account={account}\n      stakingMax={stakingTokenBalance}\n      pool={pool}\n      userInfo={userInfo}\n      stakingTokenPrice={stakingTokenPrice}\n      setLastUpdated={setLastUpdated}\n    />,\n  )\n\n  const [onPresentUnstake] = useModal(\n    <VaultStakeModal\n      account={account}\n      stakingMax={cakeAsBigNumber}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      pricePerFullShare={pricePerFullShare}\n      userInfo={userInfo}\n      vaultFees={vaultFees}\n      setLastUpdated={setLastUpdated}\n      isRemovingStake\n    />,\n  )\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\">\n        <Heading>{cakeAsDisplayBalance}</Heading>\n        <Text fontSize=\"12px\" color=\"textSubtle\">{`~${\n          stakingTokenPrice ? stakedDollarValue : <Skeleton mt=\"1px\" height={16} width={64} />\n        } USD`}</Text>\n      </Flex>\n      <Flex>\n        <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"24px\" />\n        </IconButton>\n        <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n          <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n        </IconButton>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default HasSharesActions\n","import React from 'react'\nimport { Flex, Button, useModal, Skeleton } from '@rug-zombie-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport { VaultFees } from 'hooks/cakeVault/useGetVaultFees'\nimport { VaultUser } from 'views/Pools/types'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport VaultStakeModal from '../VaultStakeModal'\nimport HasSharesActions from './HasSharesActions'\n\ninterface VaultStakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  userInfo: VaultUser\n  accountHasSharesStaked: boolean\n  pricePerFullShare: BigNumber\n  isLoading?: boolean\n  account: string\n  vaultFees: VaultFees\n  setLastUpdated: () => void\n}\n\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  userInfo,\n  accountHasSharesStaked,\n  pricePerFullShare,\n  isLoading = false,\n  account,\n  vaultFees,\n  setLastUpdated,\n}) => {\n  const { stakingToken } = pool\n  const { t } = useTranslation()\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(\n    <VaultStakeModal\n      account={account}\n      stakingMax={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n      userInfo={userInfo}\n      pool={pool}\n      setLastUpdated={setLastUpdated}\n    />,\n  )\n\n  const renderStakeAction = () => {\n    return accountHasSharesStaked ? (\n      <HasSharesActions\n        pool={pool}\n        stakingTokenBalance={stakingTokenBalance}\n        stakingTokenPrice={stakingTokenPrice}\n        userInfo={userInfo}\n        pricePerFullShare={pricePerFullShare}\n        account={account}\n        setLastUpdated={setLastUpdated}\n        vaultFees={vaultFees}\n      />\n    ) : (\n      <Button onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>{t('Stake')}</Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default VaultStakeActions\n","import BigNumber from 'bignumber.js'\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from '@rug-zombie-libs/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useCakeVaultContract } from 'hooks/useContract'\nimport { VaultFees } from 'hooks/cakeVault/useGetVaultFees'\nimport { Pool } from 'state/types'\nimport { VaultUser } from 'views/Pools/types'\nimport VaultApprovalAction from './VaultApprovalAction'\nimport VaultStakeActions from './VaultStakeActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst CakeVaultCardActions: React.FC<{\n  pool: Pool\n  userInfo: VaultUser\n  pricePerFullShare: BigNumber\n  stakingTokenPrice: number\n  accountHasSharesStaked: boolean\n  account: string\n  lastUpdated: number\n  vaultFees: VaultFees\n  isLoading: boolean\n  setLastUpdated: () => void\n}> = ({\n  pool,\n  userInfo,\n  pricePerFullShare,\n  stakingTokenPrice,\n  accountHasSharesStaked,\n  account,\n  lastUpdated,\n  vaultFees,\n  isLoading,\n  setLastUpdated,\n}) => {\n  const { stakingToken, userData } = pool\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\n  const cakeContract = useCake()\n  const cakeVaultContract = useCakeVaultContract()\n  const { t } = useTranslation()\n  const stakingTokenBalance = new BigNumber(userData?.stakingTokenBalance || 0)\n\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        setIsVaultApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsVaultApproved(false)\n      }\n    }\n\n    checkApprovalStatus()\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        <Box display=\"inline\">\n          <InlineText\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? stakingToken.symbol : t(`stake`)}{' '}\n          </InlineText>\n          <InlineText\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? t(`staked (compounding)`) : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {isVaultApproved ? (\n          <VaultStakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            stakingTokenPrice={stakingTokenPrice}\n            vaultFees={vaultFees}\n            userInfo={userInfo}\n            pricePerFullShare={pricePerFullShare}\n            accountHasSharesStaked={accountHasSharesStaked}\n            account={account}\n            setLastUpdated={setLastUpdated}\n          />\n        ) : (\n          <VaultApprovalAction pool={pool} account={account} isLoading={isLoading} setLastUpdated={setLastUpdated} />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CakeVaultCardActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, CardBody, Flex, Text } from '@rug-zombie-libs/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport UnlockButton from 'components/UnlockButton'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useGetApiPrice } from 'state/hooks'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport useGetVaultUserInfo from 'hooks/cakeVault/useGetVaultUserInfo'\nimport useGetVaultSharesInfo from 'hooks/cakeVault/useGetVaultSharesInfo'\nimport useGetVaultFees from 'hooks/cakeVault/useGetVaultFees'\nimport { Pool } from 'state/types'\nimport NFTmrRow from './NFTmr'\nimport MinimumDepositTimeRow from './MinimumDepositTime'\nimport StyledCard from './StyledCard'\nimport CardFooter from './CardFooter'\nimport StyledCardHeader from './StyledCardHeader'\nimport VaultCardActions from './VaultCardActions'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\n\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\n`\n\nconst TheMoonGraveCard: React.FC<{ pool: Pool; account: string }> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const userInfo = useGetVaultUserInfo(lastUpdated)\n  const vaultFees = useGetVaultFees()\n  const { totalCakeInVault, pricePerFullShare } = useGetVaultSharesInfo()\n  const { stakingToken } = pool\n  //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n  const timesCompoundedDaily = 288\n  const accountHasSharesStaked = userInfo.shares && userInfo.shares.gt(0)\n  const stakingTokenPrice = useGetApiPrice(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const isLoading = !pool.userData || !userInfo.shares\n  const performanceFeeAsDecimal = vaultFees.performanceFee && parseInt(vaultFees.performanceFee, 10) / 100\n\n  return (\n    <StyledCard isStaking={accountHasSharesStaked} style={{\n      maxWidth: \"400px\"\n    }}>\n      <StyledCardHeader earningTokenSymbol=\"UndeadMoon\" stakingTokenSymbol=\"TheMoon\"/>\n      <StyledCardBody isLoading={isLoading}>\n        <NFTmrRow\n          pool={pool}\n          stakingTokenPrice={stakingTokenPrice}\n          compoundFrequency={timesCompoundedDaily}\n          performanceFee={performanceFeeAsDecimal}\n        />\n        <MinimumDepositTimeRow pool={pool} stakingTokenPrice={stakingTokenPrice} />\n        <br/>\n        <br/>\n        <Flex justifyContent=\"center\"> Maybe Image of NFT here? </Flex>\n        <Flex justifyContent=\"center\"> . </Flex>\n        <Flex justifyContent=\"center\"> . </Flex>\n        <Flex justifyContent=\"center\"> . </Flex>\n        <Flex justifyContent=\"center\"> . </Flex>\n        <Flex justifyContent=\"center\"> . </Flex>\n        <Flex justifyContent=\"center\"> . </Flex>\n        <Flex justifyContent=\"center\"> . </Flex>\n        <Flex mt=\"24px\" flexDirection=\"column\">\n          {account ? (\n            <VaultCardActions\n              pool={pool}\n              userInfo={userInfo}\n              pricePerFullShare={pricePerFullShare}\n              vaultFees={vaultFees}\n              stakingTokenPrice={stakingTokenPrice}\n              accountHasSharesStaked={accountHasSharesStaked}\n              account={account}\n              lastUpdated={lastUpdated}\n              setLastUpdated={setLastUpdated}\n              isLoading={isLoading}\n            />\n          ) : (\n            <>\n              <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                {t('Start earning')}\n              </Text>\n              <UnlockButton />\n            </>\n          )}\n        </Flex>\n      </StyledCardBody>\n      <CardFooter\n        pool={pool}\n        account={account}\n        performanceFee={vaultFees.performanceFee}\n        totalCakeInVault={totalCakeInVault}\n      />\n    </StyledCard>\n  )\n}\n\nexport default TheMoonGraveCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport {\n  ButtonMenu,\n  ButtonMenuItem,\n  Button,\n  HelpIcon,\n  Toggle,\n  Text,\n  Flex,\n  NotificationDot,\n  Link as UiKitLink,\n} from '@rug-zombie-libs/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ButtonText = styled(Text)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: block;\n  }\n`\n\nconst StyledLink = styled(UiKitLink)`\n  width: 100%;\n`\n\nconst PoolTabButtons = ({ stakedOnly, setStakedOnly, hasStakeInFinishedPools }) => {\n  const { url, isExact } = useRouteMatch()\n  const { t } = useTranslation()\n\n  return (\n    <Flex alignItems='center' justifyContent='center' mb='32px'>\n      <Flex alignItems='center' flexDirection={['column', null, 'row', null]}>\n        <ButtonMenu activeIndex={isExact ? 0 : 1} scale='sm'>\n          <ButtonMenuItem as={Link} to={`${url}`}>\n            <ButtonText color='secondary' bold fontSize='16px'>\n              {t('Live')}\n            </ButtonText>\n          </ButtonMenuItem>\n          <NotificationDot show={hasStakeInFinishedPools}>\n            <ButtonMenuItem as={Link} to={`${url}/history`}>\n              <ButtonText color='secondary' bold fontSize='16px'>\n                {t('Finished')}\n              </ButtonText>\n            </ButtonMenuItem>\n          </NotificationDot>\n        </ButtonMenu>\n        <Flex mt={['4px', null, 0, null]} ml={[0, null, '24px', null]} justifyContent='center' alignItems='center'>\n          <Toggle scale='sm' checked={stakedOnly} onChange={() => setStakedOnly((prev) => !prev)} />\n          <Text ml='8px'>{t('Staked only')}</Text>\n        </Flex>\n      </Flex>\n      <Flex ml='24px' alignItems='center' justifyContent='flex-end'>\n        <StyledLink external href='https://docs.rugzombie.io/graves/grave'>\n          <Button px={['14px', null, null, null, '20px']} >\n            <ButtonText color='secondary' bold fontSize='16px'>\n              {t('Help')}\n            </ButtonText>\n            <HelpIcon color='secondary' ml={[null, null, null, 0, '6px']} />\n          </Button>\n        </StyledLink>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default PoolTabButtons\n","import { useState, useEffect } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useGetApiPrice } from 'state/hooks'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { getCakeAddress } from 'utils/addressHelpers'\n\nconst useGetVaultBountyInfo = (refresh?: number) => {\n  const cakeVaultContract = useCakeVaultContract()\n  const [estimatedCallBountyReward, setEstimatedCallBountyReward] = useState(null)\n  const [totalPendingCakeRewards, setTotalPendingCakeRewards] = useState(null)\n  const [dollarCallBountyToDisplay, setDollarBountyToDisplay] = useState(null)\n  const [cakeCallBountyToDisplay, setCakeBountyToDisplay] = useState(null)\n\n  const cakePrice = useGetApiPrice(getCakeAddress())\n\n  useEffect(() => {\n    // Call contract to get estimated rewards\n    const fetchRewards = async () => {\n      const [estimatedRewards, pendingCakeRewards] = await makeBatchRequest([\n        cakeVaultContract.methods.calculateHarvestCakeRewards().call,\n        cakeVaultContract.methods.calculateTotalPendingCakeRewards().call,\n      ])\n      setEstimatedCallBountyReward(new BigNumber(estimatedRewards as string))\n      setTotalPendingCakeRewards(new BigNumber(pendingCakeRewards as string))\n    }\n    fetchRewards()\n  }, [cakeVaultContract, refresh])\n\n  useEffect(() => {\n    // Convert estimated rewards to dollars and a cake display value\n    if (estimatedCallBountyReward && cakePrice) {\n      const dollarValueOfReward = estimatedCallBountyReward.multipliedBy(cakePrice)\n      const estimatedDollars = getFullDisplayBalance(dollarValueOfReward, 18, 2)\n      const estimatedCake = getFullDisplayBalance(estimatedCallBountyReward, 18, 3)\n      setDollarBountyToDisplay(estimatedDollars)\n      setCakeBountyToDisplay(estimatedCake)\n    }\n  }, [cakePrice, estimatedCallBountyReward])\n\n  return { estimatedCallBountyReward, dollarCallBountyToDisplay, cakeCallBountyToDisplay, totalPendingCakeRewards }\n}\n\nexport default useGetVaultBountyInfo\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Button, HelpIcon, AutoRenewIcon, useTooltip } from '@rug-zombie-libs/uikit'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface BountyModalProps {\n  cakeCallBountyToDisplay: string\n  dollarCallBountyToDisplay: string\n  totalPendingCakeRewards: BigNumber\n  callFee: number\n  onDismiss?: () => void\n  TooltipComponent: React.ElementType\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 16px auto;\n  width: 100%;\n`\n\nconst BountyModal: React.FC<BountyModalProps> = ({\n  cakeCallBountyToDisplay,\n  dollarCallBountyToDisplay,\n  totalPendingCakeRewards,\n  callFee,\n  onDismiss,\n  TooltipComponent,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { theme } = useTheme()\n  const { toastError, toastSuccess } = useToast()\n  const cakeVaultContract = useCakeVaultContract()\n  const [pendingTx, setPendingTx] = useState(false)\n  const callFeeAsDecimal = callFee / 100\n  const totalYieldToDisplay = getFullDisplayBalance(totalPendingCakeRewards, 18, 3)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent />, {\n    placement: 'bottom',\n    tooltipPadding: { right: 15 },\n  })\n\n  const handleConfirmClick = async () => {\n    cakeVaultContract.methods\n      .harvest()\n      .send({ from: account })\n      .on('sending', () => {\n        setPendingTx(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Bounty collected!'), t('CAKE bounty has been sent to your wallet.'))\n        setPendingTx(false)\n        onDismiss()\n      })\n      .on('error', (error) => {\n        console.error(error)\n        toastError(\n          t('Could not be collected'),\n          t(`There may be an issue with your transaction, or another user claimed the bounty first.`),\n        )\n        setPendingTx(false)\n      })\n  }\n\n  return (\n    <Modal title={t('Claim Bounty')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      {tooltipVisible && tooltip}\n      <Flex alignItems=\"flex-start\" justifyContent=\"space-between\">\n        <Text>{t(\"You'll claim\")}</Text>\n        <Flex flexDirection=\"column\">\n          <Text bold>{cakeCallBountyToDisplay} CAKE</Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            ~ {dollarCallBountyToDisplay} USD\n          </Text>\n        </Flex>\n      </Flex>\n      <Divider />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text fontSize=\"14px\" color=\"textSubtle\">\n          {t('Pool total pending yield')}\n        </Text>\n        <Text fontSize=\"14px\" color=\"textSubtle\">\n          {totalYieldToDisplay} CAKE\n        </Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n        <Text fontSize=\"14px\" color=\"textSubtle\">\n          {t('Bounty')}\n        </Text>\n        <Text fontSize=\"14px\" color=\"textSubtle\">\n          {callFeeAsDecimal}%\n        </Text>\n      </Flex>\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        mb=\"28px\"\n      >\n        {t('Confirm')}\n      </Button>\n      <Flex justifyContent=\"center\" alignItems=\"center\">\n        <Text fontSize=\"16px\" bold color=\"textSubtle\" mr=\"4px\">\n          {t(\"What's this?\")}\n        </Text>\n        <span ref={targetRef}>\n          <HelpIcon color=\"textSubtle\" />\n        </span>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default BountyModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Text,\n  Flex,\n  HelpIcon,\n  Button,\n  Heading,\n  Skeleton,\n  useModal,\n  Box,\n  useTooltip,\n} from '@rug-zombie-libs/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useRefresh from 'hooks/useRefresh'\nimport useGetVaultFees from 'hooks/cakeVault/useGetVaultFees'\nimport useGetVaultBountyInfo from 'hooks/cakeVault/useGetVaultBountyInfo'\nimport BountyModal from './BountyModal'\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 240px;\n  }\n`\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst BountyCard = () => {\n  const { t } = useTranslation()\n  const { fastRefresh } = useRefresh()\n  const { dollarCallBountyToDisplay, cakeCallBountyToDisplay, totalPendingCakeRewards } = useGetVaultBountyInfo(\n    fastRefresh,\n  )\n  const TooltipComponent = () => (\n    <Box>\n      <Box mb=\"16px\">{`${t(`This bounty is given as a reward for providing a service to other users.`)}`}</Box>\n      <Box mb=\"16px\">\n        {t(\n          'Whenever you successfully claim the bounty, you’re also helping out by activating the Auto CAKE Pool’s compounding function for everyone.',\n        )}\n      </Box>\n      <Box style={{ fontWeight: 'bold' }}>\n        {t(`Auto-Compound Bounty: %fee%% of all Auto CAKE pool users’ pending yield`, { fee: callFee / 100 })}\n      </Box>\n    </Box>\n  )\n  const { callFee } = useGetVaultFees()\n  const [onPresentBountyModal] = useModal(\n    <BountyModal\n      cakeCallBountyToDisplay={cakeCallBountyToDisplay}\n      dollarCallBountyToDisplay={dollarCallBountyToDisplay}\n      totalPendingCakeRewards={totalPendingCakeRewards}\n      callFee={callFee}\n      TooltipComponent={TooltipComponent}\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent />, {\n    placement: 'bottom-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <StyledCard>\n        <CardBody>\n          <Flex flexDirection=\"column\">\n            <Flex alignItems=\"center\" mb=\"12px\">\n              <Text fontSize=\"16px\" bold color=\"textSubtle\" mr=\"4px\">\n                {t('Auto CAKE Bounty')}\n              </Text>\n              <Box ref={targetRef}>\n                <HelpIcon color=\"textSubtle\" />\n              </Box>\n            </Flex>\n          </Flex>\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            <Flex flexDirection=\"column\" mr=\"12px\">\n              <Heading>{cakeCallBountyToDisplay || <Skeleton height={20} width={96} mb=\"2px\" />}</Heading>\n              <InlineText fontSize=\"12px\" color=\"textSubtle\">\n                {dollarCallBountyToDisplay ? `~ ${dollarCallBountyToDisplay} USD` : <Skeleton height={16} width={62} />}\n              </InlineText>\n            </Flex>\n            <Button\n              disabled={!dollarCallBountyToDisplay || !cakeCallBountyToDisplay || !callFee}\n              onClick={onPresentBountyModal}\n              scale=\"sm\"\n            >\n              {t('Claim')}\n            </Button>\n          </Flex>\n        </CardBody>\n      </StyledCard>\n    </>\n  )\n}\n\nexport default BountyCard\n","import React, { useMemo } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Flex, Image } from '@rug-zombie-libs/uikit'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport { useTranslation } from 'contexts/Localization'\nimport usePersistState from 'hooks/usePersistState'\nimport { usePools, useBlock } from 'state/hooks'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport PoolCard from './components/PoolCard'\nimport FirstGraveCard from './components/TheMoonGraveCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport BountyCard from './components/BountyCard'\n\nconst Pools: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const pools = usePools(account)\n  const { currentBlock } = useBlock()\n  const [stakedOnly, setStakedOnly] = usePersistState(false, 'pancake_pool_staked')\n\n  const [finishedPools, openPools] = useMemo(\n    () => partition(pools, (pool) => pool.isFinished || currentBlock > pool.endBlock),\n    [currentBlock, pools],\n  )\n  const stakedOnlyPools = useMemo(\n    () => openPools.filter((pool) => pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)),\n    [openPools],\n  )\n  const hasStakeInFinishedPools = useMemo(\n    () => finishedPools.some((pool) => pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)),\n    [finishedPools],\n  )\n  // This pool is passed explicitly to the cake vault\n  const cakePoolData = useMemo(() => openPools.find((pool) => pool.sousId === 0), [openPools])\n  const backgroundColor = \"#101820\"\n  return (\n    <>\n      <PageHeader background={backgroundColor}>\n        <Flex justifyContent=\"space-between\" flexDirection={['column', null, 'row']}>\n          <Flex flexDirection=\"column\" mr={['8px', 0]}>\n            <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\n              {t('Graves')}\n            </Heading>\n            <Heading size=\"md\" color=\"text\">\n              {t('Resurrect rugged tokens.')}\n            </Heading>\n            <Heading size=\"md\" color=\"text\">\n              {t('Stake them for NFT rewards.')}\n            </Heading>\n          </Flex>\n          <Flex height=\"fit-content\" justifyContent=\"center\" alignItems=\"center\" mt={['24px', null, '0']}>\n            <BountyCard />\n          </Flex>\n        </Flex>\n      </PageHeader>\n      <Page>\n        <PoolTabButtons\n          stakedOnly={stakedOnly}\n          setStakedOnly={setStakedOnly}\n          hasStakeInFinishedPools={hasStakeInFinishedPools}\n        />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            <>\n              <FirstGraveCard pool={cakePoolData} account={account} />\n              {/* {stakedOnly */}\n              {/*  ? orderBy(stakedOnlyPools, ['sortOrder']).map((pool) => ( */}\n              {/*      <PoolCard key={pool.sousId} pool={pool} account={account} /> */}\n              {/*    )) */}\n              {/*  : orderBy(openPools, ['sortOrder']).map((pool) => ( */}\n              {/*      <PoolCard key={pool.sousId} pool={pool} account={account} /> */}\n              {/*    ))} */}\n            </>\n          </Route>\n          <Route path={`${path}/history`}>\n            {orderBy(finishedPools, ['sortOrder']).map((pool) => (\n              <PoolCard key={pool.sousId} pool={pool} account={account} />\n            ))}\n          </Route>\n        </FlexLayout>\n        <Image\n          mx=\"auto\"\n          mt=\"12px\"\n          src=\"/images/running-zombie-1.png\"\n          alt=\"zombie running\"\n          width={207}\n          height={142}\n        />\n      </Page>\n    </>\n  )\n}\n\nexport default Pools\n","import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getCakeContract,\n  getBunnyFactoryContract,\n  getBunnySpecialContract,\n  getPancakeRabbitContract,\n  getProfileContract,\n  getIfoV1Contract,\n  getIfoV2Contract,\n  getLotteryContract,\n  getLotteryTicketContract,\n  getMasterchefContract,\n  getPointCenterIfoContract,\n  getSouschefContract,\n  getClaimRefundContract,\n  getTradingCompetitionContract,\n  getEasterNftContract,\n  getErc721Contract,\n  getCakeVaultContract,\n  getPredictionsContract,\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useCake = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport const usePancakeRabbits = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n\nexport const useLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryContract(web3), [web3])\n}\n\nexport const useLotteryTicket = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\n}\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useBunnySpecialContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useTradingCompetitionContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\n}\n\nexport const useEasterNftContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getEasterNftContract(web3), [web3])\n}\n\nexport const useCakeVaultContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeVaultContract(web3), [web3])\n}\n\nexport const usePredictionsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPredictionsContract(web3), [web3])\n}\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { ethers } from 'ethers'\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: 200000, value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals = 18, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0x453a75908fb5a36d482d5f8fe88eca836f32ead5') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking('0')\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: 200000, value: BIG_ZERO })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport { getWeb3NoAccount } from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : getWeb3NoAccount())\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : getWeb3NoAccount())\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import React from 'react'\nimport { Button, useWalletModal } from '@rug-zombie-libs/uikit'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\n\nconst UnlockButton = (props) => {\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {t('Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import { useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = () => {\n    setStateLastUpdated(Date.now())\n  }\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n"],"sourceRoot":""}